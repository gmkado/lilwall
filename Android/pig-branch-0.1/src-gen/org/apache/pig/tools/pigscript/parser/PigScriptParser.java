/* Generated By:JavaCC: Do not edit this line. PigScriptParser.java */
package org.apache.pig.tools.pigscript.parser;

import java.io.IOException;

public abstract class PigScriptParser implements PigScriptParserConstants {
        protected boolean mInteractive;

        public void setInteractive(boolean interactive)
        {
                mInteractive = interactive;
                token_source.interactive = interactive;
        }

        abstract public void prompt();

        abstract protected void quit();

        abstract protected void processDescribe(String alias) throws IOException;

        abstract protected void processIllustrate(String alias) throws IOException;

    abstract protected void processExplain(String alias) throws IOException;

        abstract protected void processRegister(String jar) throws IOException;

        abstract protected void processSet(String key, String value) throws IOException, ParseException;

        abstract protected void processCat(String path) throws IOException;

        abstract protected void processCD(String path) throws IOException;

        abstract protected void processDump(String alias) throws IOException;

        abstract protected void processKill(String jobid) throws IOException;

        abstract protected void processLS(String path) throws IOException;

        abstract protected void processPWD() throws IOException;

        abstract protected void printHelp();

        abstract protected void processMove(String src, String dst) throws IOException;

        abstract protected void processCopy(String src, String dst) throws IOException;

        abstract protected void processCopyToLocal(String src, String dst) throws IOException;

        abstract protected void processCopyFromLocal(String src, String dst) throws IOException;

        abstract protected void processMkdir(String dir) throws IOException;

        abstract protected void processPig(String cmd) throws IOException;

        abstract protected void processRemove(String path) throws IOException;

         static String unquote(String s)
        {
                if (s.charAt(0) == '\'' && s.charAt(s.length()-1) == '\'')
                        return s.substring(1, s.length()-1);
                else
                        return s;
        }

  final public void parse() throws ParseException, IOException {
        Token t1, t2;
        String val = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EOL:
      jj_consume_token(EOL);
         prompt();
      break;
    case CAT:
      jj_consume_token(CAT);
      label_1:
      while (true) {
        t1 = GetPath();
         processCat(t1.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAT:
        case CD:
        case COPY:
        case COPYFROMLOCAL:
        case COPYTOLOCAL:
        case DUMP:
        case DESCRIBE:
        case EXPLAIN:
        case HELP:
        case KILL:
        case LS:
        case MOVE:
        case MKDIR:
        case PWD:
        case QUIT:
        case REGISTER:
        case REMOVE:
        case SET:
        case SCRIPT_DONE:
        case IDENTIFIER:
        case PATH:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      break;
    case CD:
      jj_consume_token(CD);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAT:
      case CD:
      case COPY:
      case COPYFROMLOCAL:
      case COPYTOLOCAL:
      case DUMP:
      case DESCRIBE:
      case EXPLAIN:
      case HELP:
      case KILL:
      case LS:
      case MOVE:
      case MKDIR:
      case PWD:
      case QUIT:
      case REGISTER:
      case REMOVE:
      case SET:
      case SCRIPT_DONE:
      case IDENTIFIER:
      case PATH:
        t1 = GetPath();
                 processCD(t1.image);
        break;
      default:
        jj_la1[1] = jj_gen;
                 processCD(null);
      }
      break;
    case COPY:
      jj_consume_token(COPY);
      t1 = GetPath();
      t2 = GetPath();
         processCopy(t1.image, t2.image);
      break;
    case COPYFROMLOCAL:
      jj_consume_token(COPYFROMLOCAL);
      t1 = GetPath();
      t2 = GetPath();
         processCopyFromLocal(t1.image, t2.image);
      break;
    case COPYTOLOCAL:
      jj_consume_token(COPYTOLOCAL);
      t1 = GetPath();
      t2 = GetPath();
         processCopyToLocal(t1.image, t2.image);
      break;
    case DUMP:
      jj_consume_token(DUMP);
      t1 = jj_consume_token(IDENTIFIER);
         processDump(t1.image);
      break;
    case DESCRIBE:
      jj_consume_token(DESCRIBE);
      t1 = jj_consume_token(IDENTIFIER);
         processDescribe(t1.image);
      break;
    case ILLUSTRATE:
      jj_consume_token(ILLUSTRATE);
      t1 = jj_consume_token(IDENTIFIER);
         processIllustrate(t1.image);
      break;
    case EXPLAIN:
      jj_consume_token(EXPLAIN);
      t1 = jj_consume_token(IDENTIFIER);
         processExplain(t1.image);
      break;
    case HELP:
      jj_consume_token(HELP);
         printHelp();
      break;
    case KILL:
      jj_consume_token(KILL);
      t1 = jj_consume_token(IDENTIFIER);
         processKill(t1.image);
      break;
    case LS:
      jj_consume_token(LS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CAT:
      case CD:
      case COPY:
      case COPYFROMLOCAL:
      case COPYTOLOCAL:
      case DUMP:
      case DESCRIBE:
      case EXPLAIN:
      case HELP:
      case KILL:
      case LS:
      case MOVE:
      case MKDIR:
      case PWD:
      case QUIT:
      case REGISTER:
      case REMOVE:
      case SET:
      case SCRIPT_DONE:
      case IDENTIFIER:
      case PATH:
        t1 = GetPath();
                 processLS(t1.image);
        break;
      default:
        jj_la1[2] = jj_gen;
                 processLS(null);
      }
      break;
    case MOVE:
      jj_consume_token(MOVE);
      t1 = GetPath();
      t2 = GetPath();
         processMove(t1.image, t2.image);
      break;
    case MKDIR:
      jj_consume_token(MKDIR);
      t1 = GetPath();
         processMkdir(t1.image);
      break;
    case PIG:
      t1 = jj_consume_token(PIG);
         processPig(t1.image);
      break;
    case PWD:
      jj_consume_token(PWD);
         processPWD();
      break;
    case QUIT:
      jj_consume_token(QUIT);
         quit();
      break;
    case REGISTER:
      jj_consume_token(REGISTER);
      t1 = GetPath();
         processRegister(t1.image);
      break;
    case REMOVE:
      jj_consume_token(REMOVE);
      label_2:
      while (true) {
        t1 = GetPath();
                 processRemove(t1.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CAT:
        case CD:
        case COPY:
        case COPYFROMLOCAL:
        case COPYTOLOCAL:
        case DUMP:
        case DESCRIBE:
        case EXPLAIN:
        case HELP:
        case KILL:
        case LS:
        case MOVE:
        case MKDIR:
        case PWD:
        case QUIT:
        case REGISTER:
        case REMOVE:
        case SET:
        case SCRIPT_DONE:
        case IDENTIFIER:
        case PATH:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
      }
      break;
    case SCRIPT_DONE:
      jj_consume_token(SCRIPT_DONE);
         quit();
      break;
    case SET:
      jj_consume_token(SET);
      t1 = GetKey();
      t2 = GetValue();
                 processSet(t1.image, t2.image);
      break;
    case 0:
      jj_consume_token(0);
         quit();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);

      break;
    default:
      jj_la1[4] = jj_gen;
      handle_invalid_command(EOL);
         prompt();
    }
  }

  final public Token GetPath() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case PATH:
      t = jj_consume_token(PATH);
      break;
    case CAT:
    case CD:
    case COPY:
    case COPYFROMLOCAL:
    case COPYTOLOCAL:
    case DUMP:
    case DESCRIBE:
    case EXPLAIN:
    case HELP:
    case KILL:
    case LS:
    case MOVE:
    case MKDIR:
    case PWD:
    case QUIT:
    case REGISTER:
    case REMOVE:
    case SET:
    case SCRIPT_DONE:
      t = GetReserved();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token GetKey() throws ParseException {
        Token t;
    t = GetPath();
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token GetValue() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CAT:
    case CD:
    case COPY:
    case COPYFROMLOCAL:
    case COPYTOLOCAL:
    case DUMP:
    case DESCRIBE:
    case EXPLAIN:
    case HELP:
    case KILL:
    case LS:
    case MOVE:
    case MKDIR:
    case PWD:
    case QUIT:
    case REGISTER:
    case REMOVE:
    case SET:
    case SCRIPT_DONE:
    case IDENTIFIER:
    case PATH:
      t = GetPath();
      break;
    case QUOTEDSTRING:
      t = jj_consume_token(QUOTEDSTRING);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token GetReserved() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CAT:
      t = jj_consume_token(CAT);
      break;
    case CD:
      t = jj_consume_token(CD);
      break;
    case COPY:
      t = jj_consume_token(COPY);
      break;
    case COPYFROMLOCAL:
      t = jj_consume_token(COPYFROMLOCAL);
      break;
    case COPYTOLOCAL:
      t = jj_consume_token(COPYTOLOCAL);
      break;
    case DUMP:
      t = jj_consume_token(DUMP);
      break;
    case DESCRIBE:
      t = jj_consume_token(DESCRIBE);
      break;
    case EXPLAIN:
      t = jj_consume_token(EXPLAIN);
      break;
    case HELP:
      t = jj_consume_token(HELP);
      break;
    case KILL:
      t = jj_consume_token(KILL);
      break;
    case LS:
      t = jj_consume_token(LS);
      break;
    case MOVE:
      t = jj_consume_token(MOVE);
      break;
    case MKDIR:
      t = jj_consume_token(MKDIR);
      break;
    case PWD:
      t = jj_consume_token(PWD);
      break;
    case QUIT:
      t = jj_consume_token(QUIT);
      break;
    case REGISTER:
      t = jj_consume_token(REGISTER);
      break;
    case REMOVE:
      t = jj_consume_token(REMOVE);
      break;
    case SET:
      t = jj_consume_token(SET);
      break;
    case SCRIPT_DONE:
      t = jj_consume_token(SCRIPT_DONE);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  void handle_invalid_command(int kind) throws ParseException {
        ParseException e = generateParseException();  // generate the exception object.

        if (mInteractive) {
                System.out.println(e.toString());  // print the error message
                Token t = getNextToken();

                while (t.kind != kind)
                        t = getNextToken();
        } else {
                throw e;
        }
  }

  public PigScriptParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x17fffe0,0x17fffe0,0x17fffe0,0x17fffe0,0x1ffffe1,0x17fffe0,0x17fffe0,0x17fffe0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0xb0000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x180,0x180,0x180,0x180,0x0,0x180,0x380,0x0,};
   }

  public PigScriptParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public PigScriptParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PigScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public PigScriptParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PigScriptParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public PigScriptParser(PigScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(PigScriptParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[74];
    for (int i = 0; i < 74; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 74; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
