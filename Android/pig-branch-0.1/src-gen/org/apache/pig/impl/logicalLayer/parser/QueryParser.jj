/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. C:\Users\Grant\Development\workspace\lilwall\Android\pig-branch-0.1\src-gen\org\apache\pig\impl\logicalLayer\parser\QueryParser.jj */
/*@egen*//*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * JavaCC file
 * This file lists the grammar for PIG Latin.
 * QueryParser program ouputs a ParseTree given a Valid Pig Latin Query
 */
options {
  // Generate non-static functions
  STATIC = false;
  // Case is ignored in keywords
  IGNORE_CASE = true;
}

PARSER_BEGIN(QueryParser)
package org.apache.pig.impl.logicalLayer.parser;
import java.io.*;
import java.util.*;
import org.apache.pig.impl.logicalLayer.*;
import org.apache.pig.impl.logicalLayer.schema.*;
import org.apache.pig.impl.eval.*;
import org.apache.pig.impl.eval.window.*;
import org.apache.pig.impl.eval.cond.*;
import org.apache.pig.*;
import org.apache.pig.data.*;
import org.apache.pig.impl.PigContext;
import org.apache.pig.PigServer.ExecType;
import org.apache.pig.impl.io.*;
import org.apache.pig.builtin.*;
import org.apache.pig.impl.builtin.*;
import org.apache.pig.impl.logicalLayer.LogicalPlan;
import org.apache.pig.impl.streaming.StreamingCommand;
import org.apache.pig.impl.streaming.StreamingCommand.HandleSpec;
import org.apache.pig.backend.datastorage.* ;

public class QueryParser/*@bgen(jjtree)*/implements QueryParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTQueryParserState jjtree = new JJTQueryParserState();

/*@egen*/
	private PigContext pigContext;
	private Map<String, LogicalPlan> aliases;
	private Map<OperatorKey, LogicalOperator> opTable;
	private String scope;
	private NodeIdGenerator nodeIdGen;

	private long getNextId() {
		return nodeIdGen.getNextNodeId(scope);
	}

	public QueryParser(InputStream in, 
					   PigContext pigContext, 
					   String scope, 
					   Map<String, LogicalPlan> aliases,
					   Map<OperatorKey, LogicalOperator> opTable) {
		this(in);
		this.pigContext = pigContext;
		this.aliases = aliases;
		this.opTable = opTable;
		this.scope = scope;
		this.nodeIdGen = NodeIdGenerator.getGenerator();
	}
	
	public class EvalSpecAndSchema{
		EvalSpec spec;
		TupleSchema schema;
	}
	
	public class CogroupInput {
		public OperatorKey op;
		public EvalSpec spec;
	}
	    
    private static String removeQuotes(String str) {
        if (str.startsWith("\'") && str.endsWith("\'"))
            return str.substring(1, str.length() - 1);
        else
            return str;
    }

    public static LogicalPlan generateStorePlan(Map<OperatorKey, LogicalOperator> opTable,
    										    String scope,
                                                LogicalPlan readFrom,
                                                String fileName,
                                                String func,
                                                PigContext pigContext) throws IOException {
        if (func == null) {
            func = PigStorage.class.getName();
        }

        fileName = removeQuotes(fileName);

        long storeNodeId = NodeIdGenerator.getGenerator().getNextNodeId(scope);

		LogicalOperator root = new LOStore(opTable,
										   scope,
                                           storeNodeId,
                                           readFrom.getRoot(),
                                           new FileSpec(fileName, func),
                                           false);
                                           
        LogicalPlan storePlan = new LogicalPlan(root.getOperatorKey(), opTable, pigContext);

        return storePlan;
    }

    static String unquote(String s) {
		return StringUtils.unescapeInputString(s.substring(1, s.length()-1)) ;
	}
	
	static int undollar(String s) {
		return Integer.parseInt(s.substring(1, s.length()));	
	}

	/**************This is already a part of type branch. Don't merge it back ***********/
	private boolean checkFileExists(String filename) throws IOException {
        if (pigContext.getExecType() == ExecType.LOCAL) {
            ElementDescriptor elem = pigContext.getLfs().asElement(filename) ;
            return elem.exists() ;
        }
        else if (pigContext.getExecType() == ExecType.MAPREDUCE) {
            // This does actual file check + glob check
            return FileLocalizer.fileExists(filename, pigContext) ;
        }
        else { // if ExecType is something else)
            throw new RuntimeException("Undefined state in " + this.getClass()) ;
        }
    }
    /************************************************************************************/
	
	String massageFilename(String filename, PigContext pigContext)
	throws IOException, ParseException {
		if (pigContext.getExecType() != ExecType.LOCAL) {
			if (filename.startsWith(FileLocalizer.LOCAL_PREFIX)) {
					filename = FileLocalizer.hadoopify(filename, pigContext);
			} 
		}
		return filename;
	}
	
	LogicalOperator parseCogroup(ArrayList<CogroupInput> gis) throws ParseException{
		int n = gis.size();
		
		List<OperatorKey> los = new ArrayList<OperatorKey>();
		ArrayList<EvalSpec> specs = new ArrayList<EvalSpec>();
		
		for (int i = 0; i < n ; i++){
			
			CogroupInput gi = gis.get(i);
			los.add(gi.op);
			specs.add(gi.spec);
		}
		
		return new LOCogroup(opTable, scope, getNextId(), los, specs);
	}
			
	
	LogicalOperator rewriteCross(ArrayList<OperatorKey> inputs) throws IOException, ParseException{
		ArrayList<CogroupInput> gis = new ArrayList<CogroupInput>();
		int n = inputs.size();
		
		for (int i=0; i< n; i++){
			CogroupInput gi = new CogroupInput();
			gis.add(gi);

			gi.op = inputs.get(i);

			ArrayList<EvalSpec> argsColumns = new ArrayList<EvalSpec>();
			argsColumns.add(new ConstSpec(n+""));
			argsColumns.add(new ConstSpec(i+""));
			GenerateSpec args = new GenerateSpec(argsColumns);
			FuncEvalSpec fes = new FuncEvalSpec(pigContext, GFCross.class.getName(), args);
			fes.setFlatten(true);
			gi.spec = new GenerateSpec(fes).getGroupBySpec();
		}
		
		return rewriteJoin(gis); 
	}

	LogicalOperator rewriteDistinct(OperatorKey input){
		//First group the input on *
		
		ArrayList<OperatorKey> inputs = new ArrayList<OperatorKey>();
		inputs.add(input);
		
		ArrayList<EvalSpec> groupSpecs = new ArrayList<EvalSpec>();
			
		groupSpecs.add(new GenerateSpec(new StarSpec()).getGroupBySpec());
		
		LogicalOperator groupedInput = new LOCogroup(opTable, scope, getNextId(), inputs, groupSpecs);
		
		//then generate the flattened group
		EvalSpec projectSpec = new ProjectSpec(0);
		projectSpec.setFlatten(true);
		
		return new LOEval(opTable, scope, getNextId(), groupedInput.getOperatorKey()	, new GenerateSpec(projectSpec));
	}	
		
		
	
	LogicalOperator rewriteJoin(ArrayList<CogroupInput> gis) throws IOException, ParseException{
		
		int n = gis.size();
		ArrayList<EvalSpec> flattenedColumns = new ArrayList<EvalSpec>();
		
		for (int i = 0; i < n; i++) {		
			EvalSpec column = new ProjectSpec(i+1);
			column.setFlatten(true);
			flattenedColumns.add(column);
		}
		
		return new LOEval(opTable, scope, getNextId(), parseCogroup(gis).getOperatorKey(),new GenerateSpec(flattenedColumns));
	}
		
	void assertAtomic(EvalSpec spec, boolean desiredAtomic) throws ParseException{
		Boolean isAtomic = null;
		if (spec instanceof CompositeEvalSpec)
			spec = ((CompositeEvalSpec)spec).getSpecs().get(0);
		if ( spec instanceof ConstSpec || 
			(spec instanceof FuncEvalSpec && ((FuncEvalSpec)spec).getReturnType() == DataAtom.class))
			isAtomic = true;
		else if (spec instanceof FuncEvalSpec)
			isAtomic = false;
		
		if (isAtomic != null && isAtomic != desiredAtomic){
			if (desiredAtomic)
				throw new ParseException("Atomic field expected but found non-atomic field");
			else
				throw new ParseException("Non-atomic field expected but found atomic field");
		}
	}					

	EvalSpec copyItemAndAddSpec(EvalSpec spec, EvalSpec successor) throws ParseException{
		assertAtomic(spec,false);
		spec = spec.copy(pigContext);
		return spec.addSpec(successor);
	}
	
	 void addSplitOutput(LogicalPlan lp, LOSplit splitOp, String alias, Cond cond, int index){
		splitOp.addCond(cond);
		LOSplitOutput splitOut = new LOSplitOutput(opTable, scope, getNextId(), lp.getRoot(), index);
	    aliases.put(alias, new LogicalPlan(splitOut.getOperatorKey(), opTable, pigContext));
	 }

     // Check and set files to be automatically shipped for the given StreamingCommand
     // Auto-shipping rules:
     // 1. If the command begins with either perl or python assume that the 
     //    binary is the first non-quoted string it encounters that does not 
     //    start with dash - subject to restrictions in (2).
     // 2. Otherwise, attempt to ship the first string from the command line as 
     //    long as it does not come from /bin, /user/bin, /user/local/bin. 
     //    It will determine that by scanning the path if an absolute path is 
     //    provided or by executing "which". The paths can be made configurable 
     //    via "set stream.skippath <paths>" option.
     private static final String PERL = "perl";
     private static final String PYTHON = "python";
     private void checkAutoShipSpecs(StreamingCommand command, String[] argv) 
     throws ParseException {
     	// Candidate for auto-ship
     	String arg0 = argv[0];
     	
     	// Check if command is perl or python ... if so use the first non-option
     	// and non-quoted string as the candidate
        if (arg0.equalsIgnoreCase(PERL) || arg0.equalsIgnoreCase(PYTHON)) {
            for (int i=1; i < argv.length; ++i) {
            	if (!argv[i].startsWith("-") && !isQuotedString(argv[i])) {
            		checkAndShip(command, argv[i]);
            		break;
            	}
            }
        } else {
        	// Ship the first argument if it can be ...
        	checkAndShip(command, arg0);
        }
     }
     
     private void checkAndShip(StreamingCommand command, String arg) 
     throws ParseException {
     	// Don't auto-ship if it is an absolute path...
     	if (arg.startsWith("/")) {
     		return;
     	}
     	
     	// $ which arg
     	String argPath = which(arg);
     	if (argPath != null && !inSkipPaths(argPath)) {
     		try {
     		    command.addPathToShip(argPath);
     		} catch(IOException e) {
                throw new ParseException(e.getMessage());
            }
     	}
     	 
     }
     
     private boolean isQuotedString(String s) {
     	return (s.charAt(0) == '\'' && s.charAt(s.length()-1) == '\'');
     }
     
     // Check if file is in the list paths to be skipped 
     private boolean inSkipPaths(String file) {
     	for (String skipPath : pigContext.getPathsToSkip()) {
     		if (file.startsWith(skipPath)) {
     			return true;
     		}
     	}
        return false;
     }


     private static String which(String file) {
        try {
        	ProcessBuilder processBuilder = 
        	    new ProcessBuilder(new String[] {"which", file});
            Process process = processBuilder.start();
    
            BufferedReader stdout = 
                new BufferedReader(new InputStreamReader(process.getInputStream()));
            String fullPath = stdout.readLine();

            return (process.waitFor() == 0) ? fullPath : null;
        } catch (Exception e) {}
        return null;
     }
               
     private static final char SINGLE_QUOTE = '\'';
     private static final char DOUBLE_QUOTE = '"';
     private static String[] splitArgs(String command) throws ParseException {
        List<String> argv = new ArrayList<String>();

        int beginIndex = 0;
        
        while (beginIndex < command.length()) {
            // Skip spaces
            while (Character.isWhitespace(command.charAt(beginIndex))) {
                ++beginIndex;
            }
            
            char delim = ' ';
            char charAtIndex = command.charAt(beginIndex);
            if (charAtIndex == SINGLE_QUOTE || charAtIndex == DOUBLE_QUOTE) {
                delim = charAtIndex;
            }
            
            int endIndex = command.indexOf(delim, beginIndex+1);
            if (endIndex == -1) {
                if (Character.isWhitespace(delim)) {
                    // Reached end of command-line
                    argv.add(command.substring(beginIndex));
                    break;
                } else {
                    // Didn't find the ending quote/double-quote
                    throw new ParseException("Illegal command: " + command);
                }
            }
            
            if (Character.isWhitespace(delim)) {
                // Do not consume the space
                argv.add(command.substring(beginIndex, endIndex));
            } else {
                argv.add(command.substring(beginIndex, endIndex+1));
            }
           
            beginIndex = endIndex + 1;
        }
        
        return argv.toArray(new String[argv.size()]);
    }

}


class StringUtils {
    
       public static String unescapeInputString(String input)  {

            if (input == null) {
                return new String() ;
            }
            
            // Needed variables
            // preset the size so our StringBuilders don't have to grow
            int inputlength = input.length();       
            StringBuilder unicode = new StringBuilder(4);
            StringBuilder output = new StringBuilder(inputlength) ;
            boolean hadSlash = false;
            boolean inUnicode = false;
            
            // The main loop
            for (int i = 0; i < inputlength; i++) {
                char ch = input.charAt(i);
                // currently doing unicode mode
                if (inUnicode) {
                    unicode.append(ch);
                    if (unicode.length() == 4) {
                        // unicode now contains the four hex digits
                        try {
                            int value = Integer.parseInt(unicode.toString(), 0x10);
                            output.append((char) value) ;
                            // reuse the StringBuilder
                            unicode.setLength(0);
                            inUnicode = false;
                            hadSlash = false;
                        } catch (NumberFormatException nfe) {
                            throw new RuntimeException("Unable to parse unicode value: " + unicode, nfe);
                        }
                    }
                    continue;
                }
                if (hadSlash) {
                    // handle an escaped value
                    hadSlash = false;
                    switch (ch) {
                        case '\\':
                            output.append('\\');
                            break;
                        case '\'':
                            output.append('\'');
                            break;
                        case 'r':
                            output.append('\r');
                            break;
                        case 'f':
                            output.append('\f');
                            break;
                        case 't':
                            output.append('\t');
                            break;
                        case 'n':
                            output.append('\n');
                            break;
                        case 'b':
                            output.append('\b');
                            break;
                        case 'u':
                            {
                                // switch to unicode mode
                                inUnicode = true;
                                break;
                            }
                        default :
                            output.append(ch);
                            break;
                    }
                    continue;
                } else if (ch == '\\') {
                    hadSlash = true;
                    continue;
                }
                output.append(ch);
            }
            
            return output.toString() ;
        }
}

	
PARSER_END(QueryParser)

// Skip all the new lines, tabs and spaces
SKIP : { " " |	"\r" |	"\t" |	"\n" }

// Skip comments(single line and multiline)
SKIP : {
   <"--"(~["\r","\n"])*>
|  <"/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}
// Comparison operators that can be used in a filter:
TOKEN : { <#STRFILTEROP : "eq" | "gt" | "lt" | "gte" | "lte" | "neq" > }
TOKEN : { <#NUMFILTEROP : "==" | "<" | "<=" | ">" | ">=" | "!=" > }
TOKEN : { <FILTEROP : <STRFILTEROP> | <NUMFILTEROP>  > }

// List all the keywords in the language
TOKEN : { <DEFINE : "define"> }
TOKEN : { <LOAD : "load"> }
TOKEN : { <FILTER : "filter"> }
TOKEN : { <FOREACH : "foreach"> }
TOKEN : { <MATCHES : "matches"> }
TOKEN : { <ORDER : "order"> }
TOKEN : { <ARRANGE : "arrange"> }
TOKEN : { <DISTINCT : "distinct"> }
TOKEN : { <COGROUP : "cogroup"> }
TOKEN : { <JOIN : "join"> }
TOKEN : { <CROSS : "cross"> }
TOKEN : { <UNION : "union"> }
TOKEN : { <SPLIT : "split"> }
TOKEN : { <INTO : "into"> }
TOKEN : { <IF : "if"> }
TOKEN : { <ALL : "all"> }
TOKEN : { <ANY : "any"> }
TOKEN : { <AS : "as">	}
TOKEN : { <BY : "by">	}
TOKEN : { <USING : "using"> }
TOKEN : { <INNER : "inner"> }
TOKEN : { <OUTER : "outer"> }
TOKEN : { <STAR : "*"> 		}
TOKEN : { <PARALLEL : "parallel"> }
TOKEN : { <GROUP : "group"> }
TOKEN : { <AND : "and"> }
TOKEN : { <OR : "or"> }
TOKEN : { <NOT : "not"> }
TOKEN : { <CONTINUOUSLY : "continuously"> }
TOKEN : { <WINDOW : "window"> }
TOKEN : { <SECONDS : "seconds"> }
TOKEN : { <MINUTES : "minutes"> }
TOKEN : { <HOURS : "hours"> }
TOKEN : { <TUPLES : "tuples"> }
TOKEN : { <GENERATE : "generate"> }
TOKEN : { <FLATTEN : "flatten"> }
TOKEN : { <EVAL : "eval"> }
TOKEN : { <STREAM : "stream"> }
TOKEN : { <THROUGH : "through"> }
TOKEN : { <STORE : "store"> }
TOKEN : { <SHIP: "ship"> }
TOKEN : { <CACHE: "cache"> }
TOKEN : { <INPUT: "input"> }
TOKEN : { <OUTPUT: "output"> }
TOKEN : { <ERROR: "stderr"> }
TOKEN : { <STDIN: "stdin"> }
TOKEN : { <STDOUT: "stdout"> }
TOKEN : { <LIMIT: "limit"> }

TOKEN:
{
 	<#LETTER : ["a"-"z", "A"-"Z"] >
|	<#DIGIT : ["0"-"9"] >
|   <#SPECIALCHAR : ["_"] >
|   <#FSSPECIALCHAR: ["-", ":", "/"]>
|	<IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> | <SPECIALCHAR> | "::")* >
}
// Define Numeric Constants
TOKEN :
{
	< NUMBER: <INTEGER> | <FLOAT> | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )?>
| 	< #FLOAT: <INTEGER> ( "." <INTEGER> )? | "." <INTEGER> >
| 	< INTEGER: ( <DIGIT> )+ >
}

TOKEN : { <QUOTEDSTRING :  "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'"] )
          )
        | ("\\u"
            ["0"-"9","A"-"F","a"-"f"]
            ["0"-"9","A"-"F","a"-"f"]
            ["0"-"9","A"-"F","a"-"f"]
	         ["0"-"9","A"-"F","a"-"f"]
          )
      )*
      "'"> }
     
TOKEN : { <EXECCOMMAND : "`" (~["`"])* "`"> }
// Pig has special variables starting with $
TOKEN : { <DOLLARVAR : "$" <INTEGER> > }

// Parse is the Starting function.
LogicalPlan Parse() : {/*@bgen(jjtree) Parse */
                       SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator root; Token t1;}
{/*@bgen(jjtree) Parse */
        try {
/*@egen*/
	(
	LOOKAHEAD(2)
	(t1 = <IDENTIFIER> "=" root = Expr() ";" {root.setAlias(t1.image);})
|	(root = Expr() ";")
|	(<SPLIT> root = SplitClause() ";")
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return new LogicalPlan(root.getOperatorKey(), opTable, pigContext); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

LogicalOperator SplitClause():
{/*@bgen(jjtree) SplitClause */
 SimpleNode jjtn000 = new SimpleNode(JJTSPLITCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator input; Cond cond; Token alias; LOSplit splitOp; LogicalPlan lp; int i=0;}
{/*@bgen(jjtree) SplitClause */
        try {
/*@egen*/
	(
	input = NestedExpr() <INTO> 
	{
		splitOp = new LOSplit(opTable, scope, getNextId(), input.getOperatorKey());
		lp = new LogicalPlan(splitOp.getOperatorKey(), opTable, pigContext);
	}
	alias = <IDENTIFIER> <IF> cond = PCond(input.outputSchema(),null) 
	{
		addSplitOutput(lp, splitOp, alias.image, cond, i);
		i++;
	}
	(
	"," alias = <IDENTIFIER> <IF> cond = PCond(input.outputSchema(),null)
	{
		addSplitOutput(lp, splitOp, alias.image, cond, i);
		i++;
	}
	)+
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return splitOp;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
} 


LogicalOperator Expr() : {/*@bgen(jjtree) Expr */
                          SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator op; TupleSchema schema;}
{/*@bgen(jjtree) Expr */
        try {
/*@egen*/
	(
	( op = NestedExpr() [ <AS> schema = SchemaTuple() {op.setSchema(schema);} ] )
|	op = BaseExpr()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return op;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}	

LogicalOperator NestedExpr() : {/*@bgen(jjtree) NestedExpr */
                                SimpleNode jjtn000 = new SimpleNode(JJTNESTEDEXPR);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator op;}
{/*@bgen(jjtree) NestedExpr */
        try {
/*@egen*/
	(
	(op = Alias())
|	LOOKAHEAD(2) ( "(" op = NestedExpr() ")" )
|	( "(" op = BaseExpr() ")" )
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return op;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

// A reference to an alias
LogicalOperator Alias() : {/*@bgen(jjtree) Alias */
                           SimpleNode jjtn000 = new SimpleNode(JJTALIAS);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; LogicalOperator op;}
{/*@bgen(jjtree) Alias */
        try {
/*@egen*/
	t1 = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		LogicalOperator aliasOp;
		String alias = t1.image;
		
		if (aliases == null) {
			throw new RuntimeException("aliases var is not initialize.");
		}
		if (aliases.get(alias) == null) {
			StringBuilder msg = new StringBuilder();
			msg.append("Unable to find alias: '");
			msg.append(alias);
			msg.append("' - aliases: '");
			for (String tmpAlias : aliases.keySet()) {
				msg.append(tmpAlias);
				msg.append(",");
			}
			msg.append("'");
			throw new ParseException(msg.toString());
		}
		
		aliasOp = opTable.get(aliases.get(alias).getRoot());
		
		if (aliasOp == null) {
			throw new ParseException("Unrecognized alias " + alias);
		}
		
		return aliasOp;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



	
	
LogicalOperator BaseExpr() : {/*@bgen(jjtree) BaseExpr */
                              SimpleNode jjtn000 = new SimpleNode(JJTBASEEXPR);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator op; TupleSchema schema; Token t1, t2;}
{/*@bgen(jjtree) BaseExpr */
        try {
/*@egen*/
	(
	(
	(<DEFINE> op = DefineClause()) 
|	(<LOAD> op = LoadClause() [<AS> schema = SchemaTuple() {op.setSchema(schema);} ])
|	((<GROUP> | <COGROUP>) op = CogroupClause())
|	(<FILTER> op = FilterClause())
|   (<ORDER> op = OrderClause())
|	(<DISTINCT> op = NestedExpr() {op = rewriteDistinct(op.getOperatorKey());})
|	(<CROSS> op = CrossClause())
|   (<JOIN> op = JoinClause())
|	(<UNION> op = UnionClause())
|	(<FOREACH> op = ForEachClause())
|   (<STREAM> op = StreamClause() [<AS> schema = SchemaTuple() {op.setSchema(schema);} ])
|   (<STORE> op = StoreClause())
	)
    [<PARALLEL> t2=<NUMBER> { op.setRequestedParallelism(Integer.parseInt(t2.image));} ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	
	{return op;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

LogicalOperator LoadClause() : {/*@bgen(jjtree) LoadClause */
                                SimpleNode jjtn000 = new SimpleNode(JJTLOADCLAUSE);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2, t3; String filename; String funcName,funcArgs, funcSpec=null; 
								LOLoad lo=null; boolean continuous=false; String splitBy; boolean splitable = true;}
{/*@bgen(jjtree) LoadClause */
        try {
/*@egen*/
	(	filename = FileName()
		(
		<USING>  funcName = QualifiedFunction() "(" funcArgs = StringList() ")"
		{
			funcSpec = funcName + "(" + funcArgs + ")";
		}
		)?
		(
		<SPLIT> <BY> t3 = <QUOTEDSTRING>
		{
			splitBy = unquote(t3.image);
			if (splitBy.equalsIgnoreCase("file")) {
				splitable = false;
			}
		}
		)?
	)
	[ <CONTINUOUSLY> {continuous=true;} ]/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		if (funcSpec == null){
			funcSpec = PigStorage.class.getName();
			funcSpec += continuous ? "('\t','\n','0')" : "()";
		}
		 
        try {
            lo = new LOLoad(opTable, scope, getNextId(), 
                        new ValidatingInputFileSpec(massageFilename(filename, pigContext), 
                                               funcSpec, pigContext), splitable);	
        } catch(IOException e) {
            throw new ParseException(e.getMessage());
        }
		if (continuous)
			lo.setOutputType(LogicalOperator.MONOTONE);
		return lo;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}    

String StringList() : {/*@bgen(jjtree) StringList */
                       SimpleNode jjtn000 = new SimpleNode(JJTSTRINGLIST);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/StringBuilder sb = new StringBuilder(); Token t; String arg;}
{/*@bgen(jjtree) StringList */
        try {
/*@egen*/
	(
	LOOKAHEAD(2)
	(
	t = <QUOTEDSTRING> {sb.append(StringUtils.unescapeInputString(t.image));}
	| 
    t = <NUMBER> {sb.append(t.image);}
    )
    ( 
        "," 
        (
        t = <QUOTEDSTRING> {sb.append(StringUtils.unescapeInputString(t.image));}
        | 
        t = <NUMBER> {sb.append(t.image);}
        )
    )*
	| 
	{}
    )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return sb.toString();}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String FileName(): {/*@bgen(jjtree) FileName */
                    SimpleNode jjtn000 = new SimpleNode(JJTFILENAME);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FileName */
        try {
/*@egen*/
	t = <QUOTEDSTRING>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{return unquote(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

LogicalOperator FilterClause():
{/*@bgen(jjtree) FilterClause */
 SimpleNode jjtn000 = new SimpleNode(JJTFILTERCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Cond cond; LogicalOperator input;}
{/*@bgen(jjtree) FilterClause */
        try {
/*@egen*/
	input = NestedExpr()	
	 <BY> cond = PCond(input.outputSchema(),null)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return new LOEval(opTable, scope, getNextId(), input.getOperatorKey(), new FilterSpec(cond));
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Cond PCond(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) PCond */
                                                        SimpleNode jjtn000 = new SimpleNode(JJTPCOND);
                                                        boolean jjtc000 = true;
                                                        jjtree.openNodeScope(jjtn000);
/*@egen*/Cond cond = null;}
{/*@bgen(jjtree) PCond */
        try {
/*@egen*/
	cond = POrCond(over,specs)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return cond;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Cond POrCond(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) POrCond */
                                                          SimpleNode jjtn000 = new SimpleNode(JJTPORCOND);
                                                          boolean jjtc000 = true;
                                                          jjtree.openNodeScope(jjtn000);
/*@egen*/Cond cond; List<Cond> cList = new ArrayList<Cond>();}
{/*@bgen(jjtree) POrCond */
        try {
/*@egen*/
	(
	cond = PAndCond(over,specs) {cList.add(cond);}
	( <OR> cond = PAndCond(over,specs) {cList.add(cond);})* 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		if (cList.size()==1)
			return cond;
		else	
			return new OrCond(cList);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	
Cond PAndCond(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) PAndCond */
                                                           SimpleNode jjtn000 = new SimpleNode(JJTPANDCOND);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Cond cond = null; List<Cond> cList = new ArrayList<Cond>();}
{/*@bgen(jjtree) PAndCond */
        try {
/*@egen*/
	(
	cond = PUnaryCond(over,specs) {cList.add(cond);}
	( <AND> cond = PUnaryCond(over,specs) {cList.add(cond);} )*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		if (cList.size()==1)
			return cond;
		else	
			return new AndCond(cList);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

Cond PUnaryCond(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) PUnaryCond */
                                                             SimpleNode jjtn000 = new SimpleNode(JJTPUNARYCOND);
                                                             boolean jjtc000 = true;
                                                             jjtree.openNodeScope(jjtn000);
/*@egen*/Cond cond = null; EvalSpec c1, c2; Token t1; String funcName; GenerateSpec args;}
{/*@bgen(jjtree) PUnaryCond */
        try {
/*@egen*/
	(
	LOOKAHEAD("(" PCond(over,specs) ")")
	("(" cond = PCond(over,specs) ")")
|	LOOKAHEAD(InfixExpr(over,specs) <FILTEROP>) 
		(c1=InfixExpr(over,specs) t1=<FILTEROP> c2=InfixExpr(over,specs) {cond = new CompCond(c1, t1.image, c2);})
|	LOOKAHEAD(InfixExpr(over,specs) <MATCHES>) 
		(c1=InfixExpr(over,specs) <MATCHES> t1=<QUOTEDSTRING> {cond = new RegexpCond(c1, unquote(t1.image));})
|	LOOKAHEAD(FilterFunction() "(") (funcName=FilterFunction() "(" args=EvalArgs(over,specs) ")" {cond = new FuncCond(pigContext, funcName, args);})
|	cond = PNotCond(over,specs)

	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return cond;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Cond PNotCond(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) PNotCond */
                                                           SimpleNode jjtn000 = new SimpleNode(JJTPNOTCOND);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);
/*@egen*/Cond c1;}
{/*@bgen(jjtree) PNotCond */
        try {
/*@egen*/
	<NOT> c1=PUnaryCond(over,specs)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return new NotCond(c1);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



LogicalOperator CogroupClause() : {/*@bgen(jjtree) CogroupClause */
                                   SimpleNode jjtn000 = new SimpleNode(JJTCOGROUPCLAUSE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/CogroupInput gi; ArrayList<CogroupInput> gis = new ArrayList<CogroupInput>();}
{/*@bgen(jjtree) CogroupClause */
        try {
/*@egen*/
	(gi = GroupItem() { gis.add(gi); }
	("," gi = GroupItem() { gis.add(gi); })*)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return parseCogroup(gis);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


CogroupInput GroupItem() : {/*@bgen(jjtree) GroupItem */
                            SimpleNode jjtn000 = new SimpleNode(JJTGROUPITEM);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator op; GenerateSpec gs; EvalSpec es; LogicalOperator cgOp; EvalSpec cgSpec;}
{/*@bgen(jjtree) GroupItem */
        try {
/*@egen*/
	(
	cgOp = NestedExpr()
	(
	( <BY> 	
	( 
	LOOKAHEAD ( "(" FlattenedGenerateItemList(cgOp.outputSchema()) ")" )
	( "(" gs = FlattenedGenerateItemList(cgOp.outputSchema(), null) ")" )
|	(es = FlattenedGenerateItem(cgOp.outputSchema(), null) {gs = new GenerateSpec(es);})
	)
	)	
|	<ALL> {gs = new GenerateSpec(new ConstSpec("all"));}
|	<ANY> {gs = new GenerateSpec(new FuncEvalSpec(pigContext, GFAny.class.getName(), null));}
	)
	{ 
		cgSpec = gs.getGroupBySpec();
	}
	[<INNER> {cgSpec.setInner(true);} | <OUTER>]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		CogroupInput cogroupInput = new CogroupInput(); 

		cogroupInput.spec = cgSpec;
		cogroupInput.op = cgOp.getOperatorKey();
		
		return cogroupInput;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


LogicalOperator OrderClause() : {/*@bgen(jjtree) OrderClause */
                                 SimpleNode jjtn000 = new SimpleNode(JJTORDERCLAUSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator op; EvalSpec sortSpec = null; ProjectSpec projSpec; String funcName;}
{/*@bgen(jjtree) OrderClause */
        try {
/*@egen*/
	(
	op = NestedExpr() <BY> 
	(
	    ( 
		(projSpec = SimpleProj(op.outputSchema()) |	( "(" projSpec = SimpleProj(op.outputSchema()) ")"))
		{
			projSpec.setWrapInTuple(true);
			projSpec.setFlatten(true);
			sortSpec = new GenerateSpec(projSpec);
		}
		)
	|	(sortSpec = Star() {sortSpec = new GenerateSpec(sortSpec);})
	)
    (
        <USING>  funcName = QualifiedFunction()
        {
            try {
                sortSpec.setComparatorName(funcName);
            } catch (Exception e){
                throw new ParseException(e.getMessage());
            }
        }
    )?

	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return new LOSort(opTable, scope, getNextId(), op.getOperatorKey(), sortSpec);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	

LogicalOperator CrossClause() : {/*@bgen(jjtree) CrossClause */
                                 SimpleNode jjtn000 = new SimpleNode(JJTCROSSCLAUSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator op; ArrayList<OperatorKey> inputs = new ArrayList<OperatorKey>();}
{/*@bgen(jjtree) CrossClause */
        try {
/*@egen*/
	(
	op = NestedExpr() { inputs.add(op.getOperatorKey()); }
	("," op = NestedExpr() { inputs.add(op.getOperatorKey()); })+
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return rewriteCross(inputs);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

LogicalOperator JoinClause() : {/*@bgen(jjtree) JoinClause */
                                SimpleNode jjtn000 = new SimpleNode(JJTJOINCLAUSE);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/CogroupInput gi; ArrayList<CogroupInput> gis = new ArrayList<CogroupInput>();}
{/*@bgen(jjtree) JoinClause */
        try {
/*@egen*/
	(gi = GroupItem() { gis.add(gi); }
	("," gi = GroupItem() { gis.add(gi); })+)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return rewriteJoin(gis);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

LogicalOperator UnionClause() : {/*@bgen(jjtree) UnionClause */
                                 SimpleNode jjtn000 = new SimpleNode(JJTUNIONCLAUSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator op; ArrayList<OperatorKey> inputs = new ArrayList<OperatorKey>();}
{/*@bgen(jjtree) UnionClause */
        try {
/*@egen*/
	(op = NestedExpr() { inputs.add(op.getOperatorKey()); }
	("," op = NestedExpr() { inputs.add(op.getOperatorKey()); })+)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return new LOUnion(opTable, scope, getNextId(), inputs);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


LogicalOperator ForEachClause() : {/*@bgen(jjtree) ForEachClause */
                                   SimpleNode jjtn000 = new SimpleNode(JJTFOREACHCLAUSE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec spec = null; LogicalOperator input, op; }
{/*@bgen(jjtree) ForEachClause */
        try {
/*@egen*/
	(
	input = NestedExpr()
	spec = NestedBlock(input.outputSchema())
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		op = new LOEval(opTable, scope, getNextId(), input.getOperatorKey(), spec);
		return op;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

EvalSpec NestedBlock(Schema over):
{/*@bgen(jjtree) NestedBlock */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec spec; Map<String, EvalSpec> specs = new HashMap<String, EvalSpec>();}
{/*@bgen(jjtree) NestedBlock */
        try {
/*@egen*/
	(
	spec = GenerateStatement(over,specs)
|	("{" (NestedCommand(over,specs) ";")* spec = GenerateStatement(over,specs)	 ";" "}")
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return spec;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void NestedCommand(Schema over, Map<String, EvalSpec> specs):
{/*@bgen(jjtree) NestedCommand */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDCOMMAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; EvalSpec item;}
{/*@bgen(jjtree) NestedCommand */
        try {
/*@egen*/
	(
	t = <IDENTIFIER> "="
	(
	item = InfixExpr(over,specs)
|	item = NestedFilter(over,specs)	 
| 	item = NestedSortOrArrange(over,specs)
|	item = NestedDistinct(over,specs)	
	)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	
	{specs.put(t.image,item);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}		

EvalSpec NestedFilter(Schema over, Map<String, EvalSpec> specs):
{/*@bgen(jjtree) NestedFilter */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDFILTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Cond cond; EvalSpec item; Schema subSchema = null;}
{/*@bgen(jjtree) NestedFilter */
        try {
/*@egen*/
	<FILTER> item = BaseEvalSpec(over,specs) { subSchema = item.getOutputSchemaForPipe(over); }
	<BY> cond = PCond(subSchema,null)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return copyItemAndAddSpec(item,new FilterSpec(cond)); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

EvalSpec NestedSortOrArrange(Schema over, Map<String, EvalSpec> specs):
{/*@bgen(jjtree) NestedSortOrArrange */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDSORTORARRANGE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec sortSpec; ProjectSpec projSpec; EvalSpec item; Schema subSchema = null; Token t; String funcName;}
{/*@bgen(jjtree) NestedSortOrArrange */
        try {
/*@egen*/
	(
	( t = <ORDER> | t = <ARRANGE> )
	item = BaseEvalSpec(over,specs) { subSchema = item.getOutputSchemaForPipe(over); }
	<BY> ( (projSpec = SimpleProj(subSchema) {sortSpec = projSpec;})
		| sortSpec = Star() )     
    (
        <USING>  funcName = QualifiedFunction()
        {
            try {
                sortSpec.setComparatorName(funcName);
            } catch (Exception e){
                throw new ParseException(e.getMessage());
            }
        }
    )?
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return copyItemAndAddSpec(item,new SortDistinctSpec(false, sortSpec)); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	
EvalSpec NestedDistinct(Schema over, Map<String, EvalSpec> specs):
{/*@bgen(jjtree) NestedDistinct */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDDISTINCT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec item; LogicalOperator subOp = null; Token t;}
{/*@bgen(jjtree) NestedDistinct */
        try {
/*@egen*/
	(
	<DISTINCT>
	item = BaseEvalSpec(over,specs)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ 
		return copyItemAndAddSpec(item,new SortDistinctSpec(true, null)); 
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	
	
GenerateSpec GenerateStatement(Schema over, Map<String, EvalSpec> specs):
{/*@bgen(jjtree) GenerateStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTGENERATESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/GenerateSpec spec = null; TupleSchema schema;}
{/*@bgen(jjtree) GenerateStatement */
        try {
/*@egen*/
	(
	<GENERATE>
	spec = FlattenedGenerateItemList(over,specs)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return spec;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

GenerateSpec FlattenedGenerateItemList(Schema over, Map<String, EvalSpec> specs):
{/*@bgen(jjtree) FlattenedGenerateItemList */
 SimpleNode jjtn000 = new SimpleNode(JJTFLATTENEDGENERATEITEMLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ArrayList<EvalSpec> specList = new ArrayList<EvalSpec>(); EvalSpec item;}
{/*@bgen(jjtree) FlattenedGenerateItemList */
        try {
/*@egen*/
	(
	item = FlattenedGenerateItem(over,specs) {specList.add(item);}
	("," item = FlattenedGenerateItem(over,specs) {specList.add(item);})*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return new GenerateSpec(specList);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	

EvalSpec FlattenedGenerateItem(Schema over, Map<String, EvalSpec> specs): 
{/*@bgen(jjtree) FlattenedGenerateItem */
 SimpleNode jjtn000 = new SimpleNode(JJTFLATTENEDGENERATEITEM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec item; Schema schema = null;}
{/*@bgen(jjtree) FlattenedGenerateItem */
        try {
/*@egen*/
	(
	(
	(	<FLATTEN> "(" item = InfixExpr(over,specs) ")" 
		{
			item.setFlatten(true);
		}
	)
|	(item = InfixExpr(over,specs))
|	(item = Star())
	)
	[ <AS> schema = Schema() ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		item.setSchema(schema);
		return item;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	
EvalSpec InfixExpr(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) InfixExpr */
                                                                 SimpleNode jjtn000 = new SimpleNode(JJTINFIXEXPR);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);
/*@egen*/ EvalSpec expr; }
{/*@bgen(jjtree) InfixExpr */
        try {
/*@egen*/
	expr = AdditiveExpr(over,specs)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{return expr;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

EvalSpec AdditiveExpr(Schema over,  Map<String, EvalSpec> specs) : {/*@bgen(jjtree) AdditiveExpr */
                                                                     SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPR);
                                                                     boolean jjtc000 = true;
                                                                     jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; EvalSpec lhs, rhs; GenerateSpec args;  }
{/*@bgen(jjtree) AdditiveExpr */
        try {
/*@egen*/
	(
	lhs = MultiplicativeExpr(over,specs) 	
		(
		( t = "+" | t = "-" ) rhs = MultiplicativeExpr(over,specs)
		 	
		{
			assertAtomic(lhs,true);
			assertAtomic(rhs,true);
			ArrayList<EvalSpec> argsList = new ArrayList<EvalSpec>();
			argsList.add(lhs);
			argsList.add(rhs);
			args = new GenerateSpec(argsList);
			if (t.image.equals("+")){
				lhs = new FuncEvalSpec(pigContext, ADD.class.getName(), args);
			}else{
				lhs = new FuncEvalSpec(pigContext, SUBTRACT.class.getName(), args);
			}
		}
		)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return lhs;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/		
}

EvalSpec MultiplicativeExpr(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) MultiplicativeExpr */
                                                                          SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPR);
                                                                          boolean jjtc000 = true;
                                                                          jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; EvalSpec lhs, rhs; GenerateSpec args; }
{/*@bgen(jjtree) MultiplicativeExpr */
                try {
/*@egen*/
		(
		lhs = UnaryExpr(over,specs)
		(
		( t = <STAR> | t = "/" ) rhs = UnaryExpr(over,specs) 			
		{
			assertAtomic(lhs,true);
			assertAtomic(rhs,true);
			ArrayList<EvalSpec> argsList = new ArrayList<EvalSpec>();
			argsList.add(lhs);
			argsList.add(rhs);
			args = new GenerateSpec(argsList);
			if (t.image.equals("*")){
				lhs = new FuncEvalSpec(pigContext, MULTIPLY.class.getName(), args);
			}else{
				lhs = new FuncEvalSpec(pigContext, DIVIDE.class.getName(), args);
			}
		}
		)*
		)/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
		{return lhs;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

EvalSpec UnaryExpr(Schema over,  Map<String, EvalSpec> specs) : {/*@bgen(jjtree) UnaryExpr */
                                                                  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPR);
                                                                  boolean jjtc000 = true;
                                                                  jjtree.openNodeScope(jjtn000);
/*@egen*/ EvalSpec expr; }
{/*@bgen(jjtree) UnaryExpr */
        try {
/*@egen*/
	(
	LOOKAHEAD(BaseEvalSpec(over,specs)) expr = BaseEvalSpec(over,specs)
|	( "(" expr = InfixExpr(over,specs) ")" )
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return expr;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

	
EvalSpec BaseEvalSpec(Schema over, Map<String, EvalSpec> specs) :
{/*@bgen(jjtree) BaseEvalSpec */
 SimpleNode jjtn000 = new SimpleNode(JJTBASEEVALSPEC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec item;EvalSpec projection; Schema subSchema = null; Token t;}
{/*@bgen(jjtree) BaseEvalSpec */
        try {
/*@egen*/
	(
	item = Const()
|	(
	(
		LOOKAHEAD(FuncEvalSpec(over,specs))
		item = FuncEvalSpec(over,specs)
	|	item = ColOrSpec(over,specs) 
	| 	item = BinCond(over,specs)
	)
	{item = item.copy(pigContext);}
	(
		{ subSchema = item.getOutputSchemaForPipe(over); }	
		( 
			"." projection = BracketedSimpleProj(subSchema) 
			{
				assertAtomic(item,false); 
				item = item.addSpec(projection);
			}
		)
|		( "#" t = <QUOTEDSTRING> { 
			assertAtomic(item, false);
			item = item.addSpec(new MapLookupSpec(unquote(t.image)));
		}
		)
	)*
	)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return item;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



EvalSpec BinCond(Schema over, Map<String, EvalSpec> specs):
{/*@bgen(jjtree) BinCond */
 SimpleNode jjtn000 = new SimpleNode(JJTBINCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Cond cond; EvalSpec ifTrue, ifFalse; EvalSpec ret = null;}
{/*@bgen(jjtree) BinCond */
        try {
/*@egen*/	
	(
	"(" cond = PCond(over,specs) "?" ifTrue = InfixExpr(over,specs) 
	":" ifFalse = InfixExpr(over,specs) ")"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return new BinCondSpec(cond,ifTrue,ifFalse);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


EvalSpec FuncEvalSpec(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) FuncEvalSpec */
                                                                   SimpleNode jjtn000 = new SimpleNode(JJTFUNCEVALSPEC);
                                                                   boolean jjtc000 = true;
                                                                   jjtree.openNodeScope(jjtn000);
/*@egen*/String funcName; GenerateSpec args;}
{/*@bgen(jjtree) FuncEvalSpec */
        try {
/*@egen*/
	funcName=EvalFunction() "(" args=EvalArgs(over,specs) ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{return new FuncEvalSpec(pigContext, funcName, args);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

GenerateSpec EvalArgs(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) EvalArgs */
                                                                   SimpleNode jjtn000 = new SimpleNode(JJTEVALARGS);
                                                                   boolean jjtc000 = true;
                                                                   jjtree.openNodeScope(jjtn000);
/*@egen*/ArrayList<EvalSpec> specList = new ArrayList<EvalSpec>(); EvalSpec item;}
{/*@bgen(jjtree) EvalArgs */
        try {
/*@egen*/
	(
	(item=EvalArgsItem(over,specs)	{specList.add(item);}
	("," item=EvalArgsItem(over,specs) {specList.add(item);})*)
	| {}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return new GenerateSpec(specList);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

EvalSpec EvalArgsItem(Schema over, Map<String, EvalSpec> specs):
{/*@bgen(jjtree) EvalArgsItem */
 SimpleNode jjtn000 = new SimpleNode(JJTEVALARGSITEM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec item;}
{/*@bgen(jjtree) EvalArgsItem */
        try {
/*@egen*/
	(
	item = InfixExpr(over,specs)
|	item = Star()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return item;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


Schema Schema() : {/*@bgen(jjtree) Schema */
                    SimpleNode jjtn000 = new SimpleNode(JJTSCHEMA);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1; Schema item = null;}
{/*@bgen(jjtree) Schema */
        try {
/*@egen*/
	(
	LOOKAHEAD(SchemaTuple()) item = SchemaTuple()
|	LOOKAHEAD(SchemaBag()) item = SchemaBag()
|   LOOKAHEAD(AtomSchema()) item = AtomSchema() 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return item;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

Schema AtomSchema() : {/*@bgen(jjtree) AtomSchema */
                       SimpleNode jjtn000 = new SimpleNode(JJTATOMSCHEMA);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) AtomSchema */
        try {
/*@egen*/
	(  ( t1 = <IDENTIFIER> )/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ { return new AtomSchema(t1.image); } )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

TupleSchema SchemaTuple() : {/*@bgen(jjtree) SchemaTuple */
                             SimpleNode jjtn000 = new SimpleNode(JJTSCHEMATUPLE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1 = null; TupleSchema list;}
{/*@bgen(jjtree) SchemaTuple */
        try {
/*@egen*/ 
	[( t1 = <IDENTIFIER> ) ":"] "(" list = TupleSchema() ")"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	 
	{
		if (t1!=null)
			list.setAlias(t1.image);
		return list;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

TupleSchema SchemaBag() : {/*@bgen(jjtree) SchemaBag */
                           SimpleNode jjtn000 = new SimpleNode(JJTSCHEMABAG);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1 = null; TupleSchema list;}
{/*@bgen(jjtree) SchemaBag */
        try {
/*@egen*/ 
	[( t1 = <IDENTIFIER> ) ":"] "[" list = TupleSchema() "]"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	 
	{
		if (t1!=null)
			list.setAlias(t1.image); 
		return list;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}


TupleSchema TupleSchema() : {/*@bgen(jjtree) TupleSchema */
                              SimpleNode jjtn000 = new SimpleNode(JJTTUPLESCHEMA);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/ Schema item = null; TupleSchema list = new TupleSchema(); }
{/*@bgen(jjtree) TupleSchema */
        try {
/*@egen*/
	(	
	(	item=Schema() { list.add(item); } 
		( "," item=Schema() {list.add(item);} )* 
	)
|		{}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return list;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
	
//CQ stuff

EvalSpec PWindow() : {/*@bgen(jjtree) PWindow */
                      SimpleNode jjtn000 = new SimpleNode(JJTPWINDOW);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec spec; int numTuples; double time;}
{/*@bgen(jjtree) PWindow */
        try {
/*@egen*/
	( <WINDOW> 
		( LOOKAHEAD(2)
		  time = PTimeWindow() { spec = new TimeWindowSpec(WindowSpec.windowType.SLIDING, time); } |
		  numTuples = PTupleWindow() { spec = new TupleWindowSpec(WindowSpec.windowType.SLIDING, numTuples);}
		)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	  
	{return spec;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}	
	
double PTimeWindow() : {/*@bgen(jjtree) PTimeWindow */
                        SimpleNode jjtn000 = new SimpleNode(JJTPTIMEWINDOW);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/double n; Token t;}
{/*@bgen(jjtree) PTimeWindow */
        try {
/*@egen*/
	( t = <NUMBER> { n = Double.parseDouble(t.image); }
		( <SECONDS> |
		  <MINUTES> { n = n*60; } |
		  <HOURS> { n = n * 3600; }
		)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return n;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}   

int PTupleWindow() : {/*@bgen(jjtree) PTupleWindow */
                      SimpleNode jjtn000 = new SimpleNode(JJTPTUPLEWINDOW);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/int n; Token t;}
{/*@bgen(jjtree) PTupleWindow */
        try {
/*@egen*/
	( t = <NUMBER> { try{ 
						n = Integer.parseInt(t.image); 
					 }catch(NumberFormatException e){
					 	throw new ParseException("Only whole number tuple windows allowed.");
					 }
				   } 
		 <TUPLES> 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return n;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}   
	






// These the simple non-terminals that are shared across many

String EvalFunction() : {/*@bgen(jjtree) EvalFunction */
                         SimpleNode jjtn000 = new SimpleNode(JJTEVALFUNCTION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/String funcName;}
{/*@bgen(jjtree) EvalFunction */
        try {
/*@egen*/
	funcName = QualifiedFunction()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		try{
			EvalFunc ef = (EvalFunc) pigContext.instantiateFuncFromAlias(funcName);
		}catch (Exception e){
			//throw new ParseException(e.getMessage());
            ParseException pe = new ParseException(e.getMessage());
            pe.initCause(e);
			throw pe;
		}
		return funcName;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

String FilterFunction() : {/*@bgen(jjtree) FilterFunction */
                           SimpleNode jjtn000 = new SimpleNode(JJTFILTERFUNCTION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/String funcName;}
{/*@bgen(jjtree) FilterFunction */
        try {
/*@egen*/
	funcName = QualifiedFunction()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		try{
			FilterFunc ff = (FilterFunc) pigContext.instantiateFuncFromAlias(funcName);
		}catch (Exception e){
			throw new ParseException(funcName + " is not a valid filter function");
		}
		return funcName;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}


/**
 * Bug 831620 - '$' support
 */
void ClassName()       : {} { <IDENTIFIER> (("."  <IDENTIFIER>)|("$"  <IDENTIFIER>))* }

/**
 * Bug 831620 - '$' support
 */
String QualifiedFunction()       : {Token t1;StringBuffer s=new StringBuffer();}
{
	((t1=<IDENTIFIER> { s.append(t1.image);}
	 (("." t1=<IDENTIFIER> {s.append("." + t1.image);})| 
	  ("$" t1=<IDENTIFIER> {s.append("$" + t1.image);}))*)) 
	 {return s.toString();}
}


// If there is one time it may not be bracketed, but if multiple, they must be bracketed
ProjectSpec BracketedSimpleProj(Schema over) : {/*@bgen(jjtree) BracketedSimpleProj */
                                                SimpleNode jjtn000 = new SimpleNode(JJTBRACKETEDSIMPLEPROJ);
                                                boolean jjtc000 = true;
                                                jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec es; int i; ProjectSpec spec = null;}
{/*@bgen(jjtree) BracketedSimpleProj */
        try {
/*@egen*/
	(
	es = ColOrSpec(over,null) {spec = (ProjectSpec) es;} 
|	("(" spec = SimpleProj(over) ")")	
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return spec;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

ProjectSpec SimpleProj(Schema over): 
{/*@bgen(jjtree) SimpleProj */
 SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEPROJ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec i = null; ArrayList<Integer> colList = new ArrayList<Integer>();}
{/*@bgen(jjtree) SimpleProj */
        try {
/*@egen*/
	i = ColOrSpec(over,null) {colList.add(((ProjectSpec)i).getCol());}	
		("," i = ColOrSpec(over, null) {colList.add(((ProjectSpec)i).getCol());})*/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return new ProjectSpec(colList);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


//Just a simple list of projection items
GenerateSpec SimpleArgs(Schema over) : {/*@bgen(jjtree) SimpleArgs */
                                        SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEARGS);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec i = null; ArrayList<EvalSpec> specList = new ArrayList<EvalSpec>();}
{/*@bgen(jjtree) SimpleArgs */
        try {
/*@egen*/
	(
	(
	i = SimpleArgsItem(over) {specList.add(i);}	
		("," i = SimpleArgsItem(over) {specList.add(i);})*
	)
	| {}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		if (specList.isEmpty())
			return null;
		else	
			return new GenerateSpec(specList);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

EvalSpec SimpleArgsItem(Schema over):
{/*@bgen(jjtree) SimpleArgsItem */
 SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEARGSITEM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec item;}
{/*@bgen(jjtree) SimpleArgsItem */
        try {
/*@egen*/
	(
	item = Const()
|	item = ColOrSpec(over,null)
|	item = Star()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return item;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}		


StarSpec Star() : {/*@bgen(jjtree) Star */
                   SimpleNode jjtn000 = new SimpleNode(JJTSTAR);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; StarSpec spec;}
{/*@bgen(jjtree) Star */
        try {
/*@egen*/
	t1=<STAR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		spec = new StarSpec();
		spec.setFlatten(true);
		return spec;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

EvalSpec Const() : {/*@bgen(jjtree) Const */
                    SimpleNode jjtn000 = new SimpleNode(JJTCONST);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; String s;}
{/*@bgen(jjtree) Const */
        try {
/*@egen*/
	(
	t1=<QUOTEDSTRING> {s = unquote(t1.image);}
|	t1 = <NUMBER> {s = t1.image;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return new ConstSpec(s);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

EvalSpec ColOrSpec(Schema over, Map<String, EvalSpec> specs) : 
{/*@bgen(jjtree) ColOrSpec */
 SimpleNode jjtn000 = new SimpleNode(JJTCOLORSPEC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/EvalSpec spec;}
{/*@bgen(jjtree) ColOrSpec */
        try {
/*@egen*/
	(
	spec = DollarVar()
|	spec = AliasFieldOrSpec(over,specs)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return spec;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ProjectSpec DollarVar() : {/*@bgen(jjtree) DollarVar */
                           SimpleNode jjtn000 = new SimpleNode(JJTDOLLARVAR);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) DollarVar */
        try {
/*@egen*/
	t1=<DOLLARVAR>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/	
	{return new ProjectSpec(undollar(t1.image));}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

EvalSpec AliasFieldOrSpec(Schema over, Map<String, EvalSpec> specs) : {/*@bgen(jjtree) AliasFieldOrSpec */
                                                                       SimpleNode jjtn000 = new SimpleNode(JJTALIASFIELDORSPEC);
                                                                       boolean jjtc000 = true;
                                                                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1;}
{/*@bgen(jjtree) AliasFieldOrSpec */
        try {
/*@egen*/
	(t1=<GROUP> | t1=<IDENTIFIER>)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{	int i; EvalSpec item = null;
		if (specs!=null)
			item = specs.get(t1.image);
		
		if (item == null){
			if ( over == null ||  (i = over.colFor(t1.image)) == -1)
				throw new ParseException("Invalid alias: " + t1.image + " in " + over); 
			item = new ProjectSpec(i);		
		}
		return item;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

LogicalOperator StreamClause(): 
{/*@bgen(jjtree) StreamClause */
        SimpleNode jjtn000 = new SimpleNode(JJTSTREAMCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	LogicalOperator input; 
	StreamingCommand command;
}
{/*@bgen(jjtree) StreamClause */
        try {
/*@egen*/
	input = NestedExpr()	
	
	<THROUGH> command = Command()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return new LOEval(opTable, scope, getNextId(), input.getOperatorKey(), 
		                  new StreamSpec(pigContext.createExecutableManager(),
		                                 command)
		                 );
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

StreamingCommand Command(): {/*@bgen(jjtree) Command */
                             SimpleNode jjtn000 = new SimpleNode(JJTCOMMAND);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; StreamingCommand command;}
{/*@bgen(jjtree) Command */
        try {
/*@egen*/
	t = <EXECCOMMAND>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		String[] argv = splitArgs(unquote(t.image));
		command = new StreamingCommand(pigContext, argv);
        checkAutoShipSpecs(command, argv);
		return command;
	}
	|
	t = <IDENTIFIER>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		command = pigContext.getCommandForAlias(t.image);
		if (command == null) {
			throw new ParseException("Undefined command-alias: " + t.image + 
			                         " used as stream operator");
		}

		return command;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

LogicalOperator DefineClause() : {/*@bgen(jjtree) DefineClause */
                                  SimpleNode jjtn000 = new SimpleNode(JJTDEFINECLAUSE);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; Token cmd; String functionName, functionArgs;}
{/*@bgen(jjtree) DefineClause */
    try {
/*@egen*/
    t = <IDENTIFIER>
    (
    ( 
        cmd = <EXECCOMMAND>
        {
            StreamingCommand command = 
               new StreamingCommand(pigContext, splitArgs(unquote(cmd.image)));
            String[] paths;
            StreamingCommand.HandleSpec[] handleSpecs;
        }
        (
            <SHIP> "(" paths = PathList() ")" 
            {
                if (paths.length == 0) {
                	command.setShipFiles(false);
                } else {
                    for (String path : paths) {
                    	try {
                            command.addPathToShip(path);
                        } catch(IOException e) {
                            throw new ParseException(e.getMessage());
                        }
                    }
                }
            }
            |
            <CACHE> "(" paths = PathList() ")"
            {
                for (String path : paths) {
                    try {
                        command.addPathToCache(path);
                    } catch(IOException e) {
                        throw new ParseException(e.getMessage());
                    }
                }
            }
            |
            <INPUT> "(" InputOutputSpec(command, StreamingCommand.Handle.INPUT) ")"
            |
            <OUTPUT> "(" InputOutputSpec(command, StreamingCommand.Handle.OUTPUT) ")"
            |
            <ERROR> "(" ErrorSpec(command, t.image) ")"
        )*
        {
            pigContext.registerStreamCmd(t.image, command); 
        }
    )
    |
    (
        functionName = QualifiedFunction() "(" functionArgs = StringList() ")"
        {
            pigContext.registerFunction(t.image, 
                                        (functionName + "(" + functionArgs + ")"));
        }
    )
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        // Return the dummy LODefine
        return new LODefine(opTable, scope, getNextId());
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

LogicalOperator StoreClause() : {/*@bgen(jjtree) StoreClause */
                                 SimpleNode jjtn000 = new SimpleNode(JJTSTORECLAUSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
/*@egen*/LogicalOperator lo; Token t; String fileName; String functionSpec = null; String functionName, functionArgs;}
{/*@bgen(jjtree) StoreClause */
    try {
/*@egen*/   
    t = <IDENTIFIER> <INTO> fileName = FileName()
    (
        <USING> functionName = QualifiedFunction()
        {functionSpec = functionName;} 
        (
            "(" functionArgs = StringList() ")"
            {functionSpec = functionSpec + "(" + functionArgs + ")";}
        )?
    )?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        if (functionSpec == null){
            functionSpec = PigStorage.class.getName();
        }
         
        LogicalPlan readFrom = aliases.get(t.image);
        if (readFrom == null) {
            throw new ParseException("Undefined alias: " + t.image + 
                                     " used in STORE");
        }
        String jobOutputFile = massageFilename(fileName, pigContext);
        lo = new LOStore(opTable, scope, getNextId(), readFrom.getRoot(),
                         new FileSpec(jobOutputFile, functionSpec),
                         false);

        /**************This is already a part of type branch. Don't merge it back ***********/
        if (checkFileExists(jobOutputFile)) {
            throw new ParseException(jobOutputFile + " already exists. Cannot overwrite.") ;
        }
        /************************************************************************************/
        
        pigContext.setJobOutputFile(jobOutputFile);
        
        return lo;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

String[] PathList() : {/*@bgen(jjtree) PathList */
                       SimpleNode jjtn000 = new SimpleNode(JJTPATHLIST);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; List<String> pathList = new ArrayList<String>();}
{/*@bgen(jjtree) PathList */
    try {
/*@egen*/
    (
    (
    t = <QUOTEDSTRING> {pathList.add(unquote(t.image));}
    ( "," t = <QUOTEDSTRING> {pathList.add(unquote(t.image));} )*
    )
    | {}
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return pathList.toArray(new String[pathList.size()]);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void InputOutputSpec(StreamingCommand command, StreamingCommand.Handle handle):
{/*@bgen(jjtree) InputOutputSpec */
    SimpleNode jjtn000 = new SimpleNode(JJTINPUTOUTPUTSPEC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String stream, deserializer;
    StreamingCommand.HandleSpec[] handleSpecs;
    String functionName = "PigStorage", functionArgs="";
} 
{/*@bgen(jjtree) InputOutputSpec */
    try {
/*@egen*/
    stream = CommandStream() 
    [
        <USING> functionName = QualifiedFunction() 
        [
            "(" functionArgs = StringList() ")"
        ]
    ]
    {
        deserializer = functionName + "(" + functionArgs + ")";
        command.addHandleSpec(handle, 
                              new HandleSpec(stream, deserializer)
                             );
    }
    (
        "," 
        stream = CommandStream() 
        [
            <USING> functionName = QualifiedFunction() 
            [
                "(" functionArgs = StringList() ")"
            ]
        ] 
        {
            deserializer = functionName + "(" + functionArgs + ")";
            command.addHandleSpec(handle, 
                                  new HandleSpec(stream, deserializer)
                                 );
        }
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 
}

String CommandStream(): {/*@bgen(jjtree) CommandStream */
                         SimpleNode jjtn000 = new SimpleNode(JJTCOMMANDSTREAM);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CommandStream */
    try {
/*@egen*/
    t = <STDIN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return "stdin";}
    |
    t = <STDOUT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return "stdout";}
    |
    t = <QUOTEDSTRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return unquote(t.image);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ErrorSpec(StreamingCommand command, String alias): {/*@bgen(jjtree) ErrorSpec */
                                                         SimpleNode jjtn000 = new SimpleNode(JJTERRORSPEC);
                                                         boolean jjtc000 = true;
                                                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2; int limit = StreamingCommand.MAX_TASKS;}
{/*@bgen(jjtree) ErrorSpec */
        try {
/*@egen*/
	(
	t1 = <QUOTEDSTRING>
	(<LIMIT> t2 = <NUMBER> {limit = Integer.parseInt(t2.image);})?/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		command.setLogDir(unquote(t1.image));
		command.setLogFilesLimit(limit);
	}
	)
	|/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
        command.setLogDir(alias);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
