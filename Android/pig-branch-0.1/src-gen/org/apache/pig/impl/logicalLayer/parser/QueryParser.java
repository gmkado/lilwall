/* Generated By:JJTree&JavaCC: Do not edit this line. QueryParser.java */
package org.apache.pig.impl.logicalLayer.parser;
import java.io.*;
import java.util.*;
import org.apache.pig.impl.logicalLayer.*;
import org.apache.pig.impl.logicalLayer.schema.*;
import org.apache.pig.impl.eval.*;
import org.apache.pig.impl.eval.window.*;
import org.apache.pig.impl.eval.cond.*;
import org.apache.pig.*;
import org.apache.pig.data.*;
import org.apache.pig.impl.PigContext;
import org.apache.pig.PigServer.ExecType;
import org.apache.pig.impl.io.*;
import org.apache.pig.builtin.*;
import org.apache.pig.impl.builtin.*;
import org.apache.pig.impl.logicalLayer.LogicalPlan;
import org.apache.pig.impl.streaming.StreamingCommand;
import org.apache.pig.impl.streaming.StreamingCommand.HandleSpec;
import org.apache.pig.backend.datastorage.* ;

public class QueryParser/*@bgen(jjtree)*/implements QueryParserTreeConstants, QueryParserConstants {/*@bgen(jjtree)*/
  protected JJTQueryParserState jjtree = new JJTQueryParserState();private PigContext pigContext;
        private Map<String, LogicalPlan> aliases;
        private Map<OperatorKey, LogicalOperator> opTable;
        private String scope;
        private NodeIdGenerator nodeIdGen;

        private long getNextId() {
                return nodeIdGen.getNextNodeId(scope);
        }

        public QueryParser(InputStream in,
                                           PigContext pigContext,
                                           String scope,
                                           Map<String, LogicalPlan> aliases,
                                           Map<OperatorKey, LogicalOperator> opTable) {
                this(in);
                this.pigContext = pigContext;
                this.aliases = aliases;
                this.opTable = opTable;
                this.scope = scope;
                this.nodeIdGen = NodeIdGenerator.getGenerator();
        }

        public class EvalSpecAndSchema{
                EvalSpec spec;
                TupleSchema schema;
        }

        public class CogroupInput {
                public OperatorKey op;
                public EvalSpec spec;
        }

    private static String removeQuotes(String str) {
        if (str.startsWith("\'") && str.endsWith("\'"))
            return str.substring(1, str.length() - 1);
        else
            return str;
    }

    public static LogicalPlan generateStorePlan(Map<OperatorKey, LogicalOperator> opTable,
                                                                                    String scope,
                                                LogicalPlan readFrom,
                                                String fileName,
                                                String func,
                                                PigContext pigContext) throws IOException {
        if (func == null) {
            func = PigStorage.class.getName();
        }

        fileName = removeQuotes(fileName);

        long storeNodeId = NodeIdGenerator.getGenerator().getNextNodeId(scope);

                LogicalOperator root = new LOStore(opTable,
                                                                                   scope,
                                           storeNodeId,
                                           readFrom.getRoot(),
                                           new FileSpec(fileName, func),
                                           false);

        LogicalPlan storePlan = new LogicalPlan(root.getOperatorKey(), opTable, pigContext);

        return storePlan;
    }

    static String unquote(String s) {
                return StringUtils.unescapeInputString(s.substring(1, s.length()-1)) ;
        }

        static int undollar(String s) {
                return Integer.parseInt(s.substring(1, s.length()));
        }

        /**************This is already a part of type branch. Don't merge it back ***********/
        private boolean checkFileExists(String filename) throws IOException {
        if (pigContext.getExecType() == ExecType.LOCAL) {
            ElementDescriptor elem = pigContext.getLfs().asElement(filename) ;
            return elem.exists() ;
        }
        else if (pigContext.getExecType() == ExecType.MAPREDUCE) {
            // This does actual file check + glob check
            return FileLocalizer.fileExists(filename, pigContext) ;
        }
        else { // if ExecType is something else)
            throw new RuntimeException("Undefined state in " + this.getClass()) ;
        }
    }
    /************************************************************************************/

        String massageFilename(String filename, PigContext pigContext)
        throws IOException, ParseException {
                if (pigContext.getExecType() != ExecType.LOCAL) {
                        if (filename.startsWith(FileLocalizer.LOCAL_PREFIX)) {
                                        filename = FileLocalizer.hadoopify(filename, pigContext);
                        }
                }
                return filename;
        }

        LogicalOperator parseCogroup(ArrayList<CogroupInput> gis) throws ParseException{
                int n = gis.size();

                List<OperatorKey> los = new ArrayList<OperatorKey>();
                ArrayList<EvalSpec> specs = new ArrayList<EvalSpec>();

                for (int i = 0; i < n ; i++){

                        CogroupInput gi = gis.get(i);
                        los.add(gi.op);
                        specs.add(gi.spec);
                }

                return new LOCogroup(opTable, scope, getNextId(), los, specs);
        }


        LogicalOperator rewriteCross(ArrayList<OperatorKey> inputs) throws IOException, ParseException{
                ArrayList<CogroupInput> gis = new ArrayList<CogroupInput>();
                int n = inputs.size();

                for (int i=0; i< n; i++){
                        CogroupInput gi = new CogroupInput();
                        gis.add(gi);

                        gi.op = inputs.get(i);

                        ArrayList<EvalSpec> argsColumns = new ArrayList<EvalSpec>();
                        argsColumns.add(new ConstSpec(n+""));
                        argsColumns.add(new ConstSpec(i+""));
                        GenerateSpec args = new GenerateSpec(argsColumns);
                        FuncEvalSpec fes = new FuncEvalSpec(pigContext, GFCross.class.getName(), args);
                        fes.setFlatten(true);
                        gi.spec = new GenerateSpec(fes).getGroupBySpec();
                }

                return rewriteJoin(gis);
        }

        LogicalOperator rewriteDistinct(OperatorKey input){
                //First group the input on *

                ArrayList<OperatorKey> inputs = new ArrayList<OperatorKey>();
                inputs.add(input);

                ArrayList<EvalSpec> groupSpecs = new ArrayList<EvalSpec>();

                groupSpecs.add(new GenerateSpec(new StarSpec()).getGroupBySpec());

                LogicalOperator groupedInput = new LOCogroup(opTable, scope, getNextId(), inputs, groupSpecs);

                //then generate the flattened group
                EvalSpec projectSpec = new ProjectSpec(0);
                projectSpec.setFlatten(true);

                return new LOEval(opTable, scope, getNextId(), groupedInput.getOperatorKey()    , new GenerateSpec(projectSpec));
        }



        LogicalOperator rewriteJoin(ArrayList<CogroupInput> gis) throws IOException, ParseException{

                int n = gis.size();
                ArrayList<EvalSpec> flattenedColumns = new ArrayList<EvalSpec>();

                for (int i = 0; i < n; i++) {
                        EvalSpec column = new ProjectSpec(i+1);
                        column.setFlatten(true);
                        flattenedColumns.add(column);
                }

                return new LOEval(opTable, scope, getNextId(), parseCogroup(gis).getOperatorKey(),new GenerateSpec(flattenedColumns));
        }

        void assertAtomic(EvalSpec spec, boolean desiredAtomic) throws ParseException{
                Boolean isAtomic = null;
                if (spec instanceof CompositeEvalSpec)
                        spec = ((CompositeEvalSpec)spec).getSpecs().get(0);
                if ( spec instanceof ConstSpec ||
                        (spec instanceof FuncEvalSpec && ((FuncEvalSpec)spec).getReturnType() == DataAtom.class))
                        isAtomic = true;
                else if (spec instanceof FuncEvalSpec)
                        isAtomic = false;

                if (isAtomic != null && isAtomic != desiredAtomic){
                        if (desiredAtomic)
                                throw new ParseException("Atomic field expected but found non-atomic field");
                        else
                                throw new ParseException("Non-atomic field expected but found atomic field");
                }
        }

        EvalSpec copyItemAndAddSpec(EvalSpec spec, EvalSpec successor) throws ParseException{
                assertAtomic(spec,false);
                spec = spec.copy(pigContext);
                return spec.addSpec(successor);
        }

         void addSplitOutput(LogicalPlan lp, LOSplit splitOp, String alias, Cond cond, int index){
                splitOp.addCond(cond);
                LOSplitOutput splitOut = new LOSplitOutput(opTable, scope, getNextId(), lp.getRoot(), index);
            aliases.put(alias, new LogicalPlan(splitOut.getOperatorKey(), opTable, pigContext));
         }

     // Check and set files to be automatically shipped for the given StreamingCommand
     // Auto-shipping rules:
     // 1. If the command begins with either perl or python assume that the 
     //    binary is the first non-quoted string it encounters that does not 
     //    start with dash - subject to restrictions in (2).
     // 2. Otherwise, attempt to ship the first string from the command line as 
     //    long as it does not come from /bin, /user/bin, /user/local/bin. 
     //    It will determine that by scanning the path if an absolute path is 
     //    provided or by executing "which". The paths can be made configurable 
     //    via "set stream.skippath <paths>" option.
     private static final String PERL = "perl";
     private static final String PYTHON = "python";
     private void checkAutoShipSpecs(StreamingCommand command, String[] argv)
     throws ParseException {
        // Candidate for auto-ship
        String arg0 = argv[0];

        // Check if command is perl or python ... if so use the first non-option
        // and non-quoted string as the candidate
        if (arg0.equalsIgnoreCase(PERL) || arg0.equalsIgnoreCase(PYTHON)) {
            for (int i=1; i < argv.length; ++i) {
                if (!argv[i].startsWith("-") && !isQuotedString(argv[i])) {
                        checkAndShip(command, argv[i]);
                        break;
                }
            }
        } else {
                // Ship the first argument if it can be ...
                checkAndShip(command, arg0);
        }
     }

     private void checkAndShip(StreamingCommand command, String arg)
     throws ParseException {
        // Don't auto-ship if it is an absolute path...
        if (arg.startsWith("/")) {
                return;
        }

        // $ which arg
        String argPath = which(arg);
        if (argPath != null && !inSkipPaths(argPath)) {
                try {
                    command.addPathToShip(argPath);
                } catch(IOException e) {
                throw new ParseException(e.getMessage());
            }
        }

     }

     private boolean isQuotedString(String s) {
        return (s.charAt(0) == '\'' && s.charAt(s.length()-1) == '\'');
     }

     // Check if file is in the list paths to be skipped 
     private boolean inSkipPaths(String file) {
        for (String skipPath : pigContext.getPathsToSkip()) {
                if (file.startsWith(skipPath)) {
                        return true;
                }
        }
        return false;
     }


     private static String which(String file) {
        try {
                ProcessBuilder processBuilder =
                    new ProcessBuilder(new String[] {"which", file});
            Process process = processBuilder.start();

            BufferedReader stdout =
                new BufferedReader(new InputStreamReader(process.getInputStream()));
            String fullPath = stdout.readLine();

            return (process.waitFor() == 0) ? fullPath : null;
        } catch (Exception e) {}
        return null;
     }

     private static final char SINGLE_QUOTE = '\'';
     private static final char DOUBLE_QUOTE = '"';
     private static String[] splitArgs(String command) throws ParseException {
        List<String> argv = new ArrayList<String>();

        int beginIndex = 0;

        while (beginIndex < command.length()) {
            // Skip spaces
            while (Character.isWhitespace(command.charAt(beginIndex))) {
                ++beginIndex;
            }

            char delim = ' ';
            char charAtIndex = command.charAt(beginIndex);
            if (charAtIndex == SINGLE_QUOTE || charAtIndex == DOUBLE_QUOTE) {
                delim = charAtIndex;
            }

            int endIndex = command.indexOf(delim, beginIndex+1);
            if (endIndex == -1) {
                if (Character.isWhitespace(delim)) {
                    // Reached end of command-line
                    argv.add(command.substring(beginIndex));
                    break;
                } else {
                    // Didn't find the ending quote/double-quote
                    throw new ParseException("Illegal command: " + command);
                }
            }

            if (Character.isWhitespace(delim)) {
                // Do not consume the space
                argv.add(command.substring(beginIndex, endIndex));
            } else {
                argv.add(command.substring(beginIndex, endIndex+1));
            }

            beginIndex = endIndex + 1;
        }

        return argv.toArray(new String[argv.size()]);
    }

// Parse is the Starting function.
  final public LogicalPlan Parse() throws ParseException {
                       /*@bgen(jjtree) Parse */
                       SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);LogicalOperator root; Token t1;
    try {
      if (jj_2_1(2)) {
        t1 = jj_consume_token(IDENTIFIER);
        jj_consume_token(69);
        root = Expr();
        jj_consume_token(70);
                                                  root.setAlias(t1.image);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEFINE:
        case LOAD:
        case FILTER:
        case FOREACH:
        case ORDER:
        case DISTINCT:
        case COGROUP:
        case JOIN:
        case CROSS:
        case UNION:
        case GROUP:
        case STREAM:
        case STORE:
        case IDENTIFIER:
        case 72:
          root = Expr();
          jj_consume_token(70);
          break;
        case SPLIT:
          jj_consume_token(SPLIT);
          root = SplitClause();
          jj_consume_token(70);
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return new LogicalPlan(root.getOperatorKey(), opTable, pigContext);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator SplitClause() throws ParseException {
 /*@bgen(jjtree) SplitClause */
 SimpleNode jjtn000 = new SimpleNode(JJTSPLITCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);LogicalOperator input; Cond cond; Token alias; LOSplit splitOp; LogicalPlan lp; int i=0;
    try {
      input = NestedExpr();
      jj_consume_token(INTO);
                splitOp = new LOSplit(opTable, scope, getNextId(), input.getOperatorKey());
                lp = new LogicalPlan(splitOp.getOperatorKey(), opTable, pigContext);
      alias = jj_consume_token(IDENTIFIER);
      jj_consume_token(IF);
      cond = PCond(input.outputSchema(),null);
                addSplitOutput(lp, splitOp, alias.image, cond, i);
                i++;
      label_1:
      while (true) {
        jj_consume_token(71);
        alias = jj_consume_token(IDENTIFIER);
        jj_consume_token(IF);
        cond = PCond(input.outputSchema(),null);
                addSplitOutput(lp, splitOp, alias.image, cond, i);
                i++;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 71:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return splitOp;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator Expr() throws ParseException {
                          /*@bgen(jjtree) Expr */
                          SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);LogicalOperator op; TupleSchema schema;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 72:
        op = NestedExpr();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          schema = SchemaTuple();
                                                           op.setSchema(schema);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        break;
      case DEFINE:
      case LOAD:
      case FILTER:
      case FOREACH:
      case ORDER:
      case DISTINCT:
      case COGROUP:
      case JOIN:
      case CROSS:
      case UNION:
      case GROUP:
      case STREAM:
      case STORE:
        op = BaseExpr();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return op;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator NestedExpr() throws ParseException {
                                /*@bgen(jjtree) NestedExpr */
                                SimpleNode jjtn000 = new SimpleNode(JJTNESTEDEXPR);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);LogicalOperator op;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        op = Alias();
        break;
      default:
        jj_la1[4] = jj_gen;
        if (jj_2_2(2)) {
          jj_consume_token(72);
          op = NestedExpr();
          jj_consume_token(73);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 72:
            jj_consume_token(72);
            op = BaseExpr();
            jj_consume_token(73);
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return op;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

// A reference to an alias
  final public LogicalOperator Alias() throws ParseException {
                           /*@bgen(jjtree) Alias */
                           SimpleNode jjtn000 = new SimpleNode(JJTALIAS);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t1; LogicalOperator op;
    try {
      t1 = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                LogicalOperator aliasOp;
                String alias = t1.image;

                if (aliases == null) {
                        {if (true) throw new RuntimeException("aliases var is not initialize.");}
                }
                if (aliases.get(alias) == null) {
                        StringBuilder msg = new StringBuilder();
                        msg.append("Unable to find alias: '");
                        msg.append(alias);
                        msg.append("' - aliases: '");
                        for (String tmpAlias : aliases.keySet()) {
                                msg.append(tmpAlias);
                                msg.append(",");
                        }
                        msg.append("'");
                        {if (true) throw new ParseException(msg.toString());}
                }

                aliasOp = opTable.get(aliases.get(alias).getRoot());

                if (aliasOp == null) {
                        {if (true) throw new ParseException("Unrecognized alias " + alias);}
                }

                {if (true) return aliasOp;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator BaseExpr() throws ParseException {
                              /*@bgen(jjtree) BaseExpr */
                              SimpleNode jjtn000 = new SimpleNode(JJTBASEEXPR);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);LogicalOperator op; TupleSchema schema; Token t1, t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEFINE:
        jj_consume_token(DEFINE);
        op = DefineClause();
        break;
      case LOAD:
        jj_consume_token(LOAD);
        op = LoadClause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          schema = SchemaTuple();
                                                                op.setSchema(schema);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        break;
      case COGROUP:
      case GROUP:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GROUP:
          jj_consume_token(GROUP);
          break;
        case COGROUP:
          jj_consume_token(COGROUP);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        op = CogroupClause();
        break;
      case FILTER:
        jj_consume_token(FILTER);
        op = FilterClause();
        break;
      case ORDER:
        jj_consume_token(ORDER);
        op = OrderClause();
        break;
      case DISTINCT:
        jj_consume_token(DISTINCT);
        op = NestedExpr();
                                       op = rewriteDistinct(op.getOperatorKey());
        break;
      case CROSS:
        jj_consume_token(CROSS);
        op = CrossClause();
        break;
      case JOIN:
        jj_consume_token(JOIN);
        op = JoinClause();
        break;
      case UNION:
        jj_consume_token(UNION);
        op = UnionClause();
        break;
      case FOREACH:
        jj_consume_token(FOREACH);
        op = ForEachClause();
        break;
      case STREAM:
        jj_consume_token(STREAM);
        op = StreamClause();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          schema = SchemaTuple();
                                                                op.setSchema(schema);
          break;
        default:
          jj_la1[8] = jj_gen;
          ;
        }
        break;
      case STORE:
        jj_consume_token(STORE);
        op = StoreClause();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARALLEL:
        jj_consume_token(PARALLEL);
        t2 = jj_consume_token(NUMBER);
                              op.setRequestedParallelism(Integer.parseInt(t2.image));
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return op;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator LoadClause() throws ParseException {
                                /*@bgen(jjtree) LoadClause */
                                SimpleNode jjtn000 = new SimpleNode(JJTLOADCLAUSE);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t1, t2, t3; String filename; String funcName,funcArgs, funcSpec=null;
                                                                LOLoad lo=null; boolean continuous=false; String splitBy; boolean splitable = true;
    try {
      filename = FileName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        jj_consume_token(USING);
        funcName = QualifiedFunction();
        jj_consume_token(72);
        funcArgs = StringList();
        jj_consume_token(73);
                        funcSpec = funcName + "(" + funcArgs + ")";
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPLIT:
        jj_consume_token(SPLIT);
        jj_consume_token(BY);
        t3 = jj_consume_token(QUOTEDSTRING);
                        splitBy = unquote(t3.image);
                        if (splitBy.equalsIgnoreCase("file")) {
                                splitable = false;
                        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTINUOUSLY:
        jj_consume_token(CONTINUOUSLY);
                          continuous=true;
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (funcSpec == null){
                        funcSpec = PigStorage.class.getName();
                        funcSpec += continuous ? "('\t','\n','0')" : "()";
                }

        try {
            lo = new LOLoad(opTable, scope, getNextId(),
                        new ValidatingInputFileSpec(massageFilename(filename, pigContext),
                                               funcSpec, pigContext), splitable);
        } catch(IOException e) {
            {if (true) throw new ParseException(e.getMessage());}
        }
                if (continuous)
                        lo.setOutputType(LogicalOperator.MONOTONE);
                {if (true) return lo;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String StringList() throws ParseException {
                       /*@bgen(jjtree) StringList */
                       SimpleNode jjtn000 = new SimpleNode(JJTSTRINGLIST);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);StringBuilder sb = new StringBuilder(); Token t; String arg;
    try {
      if (jj_2_3(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUOTEDSTRING:
          t = jj_consume_token(QUOTEDSTRING);
                            sb.append(StringUtils.unescapeInputString(t.image));
          break;
        case NUMBER:
          t = jj_consume_token(NUMBER);
                  sb.append(t.image);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 71:
            ;
            break;
          default:
            jj_la1[15] = jj_gen;
            break label_2;
          }
          jj_consume_token(71);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case QUOTEDSTRING:
            t = jj_consume_token(QUOTEDSTRING);
                            sb.append(StringUtils.unescapeInputString(t.image));
            break;
          case NUMBER:
            t = jj_consume_token(NUMBER);
                      sb.append(t.image);
            break;
          default:
            jj_la1[16] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {

      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return sb.toString();}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String FileName() throws ParseException {
                    /*@bgen(jjtree) FileName */
                    SimpleNode jjtn000 = new SimpleNode(JJTFILENAME);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(QUOTEDSTRING);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return unquote(t.image);}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator FilterClause() throws ParseException {
 /*@bgen(jjtree) FilterClause */
 SimpleNode jjtn000 = new SimpleNode(JJTFILTERCLAUSE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Cond cond; LogicalOperator input;
    try {
      input = NestedExpr();
      jj_consume_token(BY);
      cond = PCond(input.outputSchema(),null);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return new LOEval(opTable, scope, getNextId(), input.getOperatorKey(), new FilterSpec(cond));}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Cond PCond(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                        /*@bgen(jjtree) PCond */
                                                        SimpleNode jjtn000 = new SimpleNode(JJTPCOND);
                                                        boolean jjtc000 = true;
                                                        jjtree.openNodeScope(jjtn000);Cond cond = null;
    try {
      cond = POrCond(over,specs);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return cond;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Cond POrCond(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                          /*@bgen(jjtree) POrCond */
                                                          SimpleNode jjtn000 = new SimpleNode(JJTPORCOND);
                                                          boolean jjtc000 = true;
                                                          jjtree.openNodeScope(jjtn000);Cond cond; List<Cond> cList = new ArrayList<Cond>();
    try {
      cond = PAndCond(over,specs);
                                     cList.add(cond);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_3;
        }
        jj_consume_token(OR);
        cond = PAndCond(over,specs);
                                            cList.add(cond);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (cList.size()==1)
                        {if (true) return cond;}
                else
                        {if (true) return new OrCond(cList);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Cond PAndCond(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                           /*@bgen(jjtree) PAndCond */
                                                           SimpleNode jjtn000 = new SimpleNode(JJTPANDCOND);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);Cond cond = null; List<Cond> cList = new ArrayList<Cond>();
    try {
      cond = PUnaryCond(over,specs);
                                       cList.add(cond);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_4;
        }
        jj_consume_token(AND);
        cond = PUnaryCond(over,specs);
                                               cList.add(cond);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (cList.size()==1)
                        {if (true) return cond;}
                else
                        {if (true) return new AndCond(cList);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Cond PUnaryCond(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                             /*@bgen(jjtree) PUnaryCond */
                                                             SimpleNode jjtn000 = new SimpleNode(JJTPUNARYCOND);
                                                             boolean jjtc000 = true;
                                                             jjtree.openNodeScope(jjtn000);Cond cond = null; EvalSpec c1, c2; Token t1; String funcName; GenerateSpec args;
    try {
      if (jj_2_4(2147483647)) {
        jj_consume_token(72);
        cond = PCond(over,specs);
        jj_consume_token(73);
      } else if (jj_2_5(2147483647)) {
        c1 = InfixExpr(over,specs);
        t1 = jj_consume_token(FILTEROP);
        c2 = InfixExpr(over,specs);
                                                                                  cond = new CompCond(c1, t1.image, c2);
      } else if (jj_2_6(2147483647)) {
        c1 = InfixExpr(over,specs);
        jj_consume_token(MATCHES);
        t1 = jj_consume_token(QUOTEDSTRING);
                                                                       cond = new RegexpCond(c1, unquote(t1.image));
      } else if (jj_2_7(2147483647)) {
        funcName = FilterFunction();
        jj_consume_token(72);
        args = EvalArgs(over,specs);
        jj_consume_token(73);
                                                                                                      cond = new FuncCond(pigContext, funcName, args);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          cond = PNotCond(over,specs);
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return cond;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Cond PNotCond(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                           /*@bgen(jjtree) PNotCond */
                                                           SimpleNode jjtn000 = new SimpleNode(JJTPNOTCOND);
                                                           boolean jjtc000 = true;
                                                           jjtree.openNodeScope(jjtn000);Cond c1;
    try {
      jj_consume_token(NOT);
      c1 = PUnaryCond(over,specs);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new NotCond(c1);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator CogroupClause() throws ParseException {
                                   /*@bgen(jjtree) CogroupClause */
                                   SimpleNode jjtn000 = new SimpleNode(JJTCOGROUPCLAUSE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);CogroupInput gi; ArrayList<CogroupInput> gis = new ArrayList<CogroupInput>();
    try {
      gi = GroupItem();
                            gis.add(gi);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 71:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_5;
        }
        jj_consume_token(71);
        gi = GroupItem();
                                gis.add(gi);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return parseCogroup(gis);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public CogroupInput GroupItem() throws ParseException {
                            /*@bgen(jjtree) GroupItem */
                            SimpleNode jjtn000 = new SimpleNode(JJTGROUPITEM);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);LogicalOperator op; GenerateSpec gs; EvalSpec es; LogicalOperator cgOp; EvalSpec cgSpec;
    try {
      cgOp = NestedExpr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BY:
        jj_consume_token(BY);
        if (jj_2_8(2147483647)) {
          jj_consume_token(72);
          gs = FlattenedGenerateItemList(cgOp.outputSchema(), null);
          jj_consume_token(73);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STAR:
          case GROUP:
          case FLATTEN:
          case IDENTIFIER:
          case NUMBER:
          case QUOTEDSTRING:
          case DOLLARVAR:
          case 72:
            es = FlattenedGenerateItem(cgOp.outputSchema(), null);
                                                                gs = new GenerateSpec(es);
            break;
          default:
            jj_la1[21] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case ALL:
        jj_consume_token(ALL);
               gs = new GenerateSpec(new ConstSpec("all"));
        break;
      case ANY:
        jj_consume_token(ANY);
               gs = new GenerateSpec(new FuncEvalSpec(pigContext, GFAny.class.getName(), null));
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                cgSpec = gs.getGroupBySpec();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INNER:
      case OUTER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INNER:
          jj_consume_token(INNER);
                  cgSpec.setInner(true);
          break;
        case OUTER:
          jj_consume_token(OUTER);
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                CogroupInput cogroupInput = new CogroupInput();

                cogroupInput.spec = cgSpec;
                cogroupInput.op = cgOp.getOperatorKey();

                {if (true) return cogroupInput;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator OrderClause() throws ParseException {
                                 /*@bgen(jjtree) OrderClause */
                                 SimpleNode jjtn000 = new SimpleNode(JJTORDERCLAUSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);LogicalOperator op; EvalSpec sortSpec = null; ProjectSpec projSpec; String funcName;
    try {
      op = NestedExpr();
      jj_consume_token(BY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
      case IDENTIFIER:
      case DOLLARVAR:
      case 72:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GROUP:
        case IDENTIFIER:
        case DOLLARVAR:
          projSpec = SimpleProj(op.outputSchema());
          break;
        case 72:
          jj_consume_token(72);
          projSpec = SimpleProj(op.outputSchema());
          jj_consume_token(73);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                        projSpec.setWrapInTuple(true);
                        projSpec.setFlatten(true);
                        sortSpec = new GenerateSpec(projSpec);
        break;
      case STAR:
        sortSpec = Star();
                                    sortSpec = new GenerateSpec(sortSpec);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        jj_consume_token(USING);
        funcName = QualifiedFunction();
            try {
                sortSpec.setComparatorName(funcName);
            } catch (Exception e){
                {if (true) throw new ParseException(e.getMessage());}
            }
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return new LOSort(opTable, scope, getNextId(), op.getOperatorKey(), sortSpec);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator CrossClause() throws ParseException {
                                 /*@bgen(jjtree) CrossClause */
                                 SimpleNode jjtn000 = new SimpleNode(JJTCROSSCLAUSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);LogicalOperator op; ArrayList<OperatorKey> inputs = new ArrayList<OperatorKey>();
    try {
      op = NestedExpr();
                            inputs.add(op.getOperatorKey());
      label_6:
      while (true) {
        jj_consume_token(71);
        op = NestedExpr();
                                 inputs.add(op.getOperatorKey());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 71:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_6;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return rewriteCross(inputs);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator JoinClause() throws ParseException {
                                /*@bgen(jjtree) JoinClause */
                                SimpleNode jjtn000 = new SimpleNode(JJTJOINCLAUSE);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);CogroupInput gi; ArrayList<CogroupInput> gis = new ArrayList<CogroupInput>();
    try {
      gi = GroupItem();
                            gis.add(gi);
      label_7:
      while (true) {
        jj_consume_token(71);
        gi = GroupItem();
                                gis.add(gi);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 71:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_7;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return rewriteJoin(gis);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator UnionClause() throws ParseException {
                                 /*@bgen(jjtree) UnionClause */
                                 SimpleNode jjtn000 = new SimpleNode(JJTUNIONCLAUSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);LogicalOperator op; ArrayList<OperatorKey> inputs = new ArrayList<OperatorKey>();
    try {
      op = NestedExpr();
                             inputs.add(op.getOperatorKey());
      label_8:
      while (true) {
        jj_consume_token(71);
        op = NestedExpr();
                                 inputs.add(op.getOperatorKey());
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 71:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_8;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new LOUnion(opTable, scope, getNextId(), inputs);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator ForEachClause() throws ParseException {
                                   /*@bgen(jjtree) ForEachClause */
                                   SimpleNode jjtn000 = new SimpleNode(JJTFOREACHCLAUSE);
                                   boolean jjtc000 = true;
                                   jjtree.openNodeScope(jjtn000);EvalSpec spec = null; LogicalOperator input, op;
    try {
      input = NestedExpr();
      spec = NestedBlock(input.outputSchema());
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                op = new LOEval(opTable, scope, getNextId(), input.getOperatorKey(), spec);
                {if (true) return op;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec NestedBlock(Schema over) throws ParseException {
 /*@bgen(jjtree) NestedBlock */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDBLOCK);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);EvalSpec spec; Map<String, EvalSpec> specs = new HashMap<String, EvalSpec>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENERATE:
        spec = GenerateStatement(over,specs);
        break;
      case 74:
        jj_consume_token(74);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_9;
          }
          NestedCommand(over,specs);
          jj_consume_token(70);
        }
        spec = GenerateStatement(over,specs);
        jj_consume_token(70);
        jj_consume_token(75);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return spec;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void NestedCommand(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) NestedCommand */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDCOMMAND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t; EvalSpec item;
    try {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(69);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
      case IDENTIFIER:
      case NUMBER:
      case QUOTEDSTRING:
      case DOLLARVAR:
      case 72:
        item = InfixExpr(over,specs);
        break;
      case FILTER:
        item = NestedFilter(over,specs);
        break;
      case ORDER:
      case ARRANGE:
        item = NestedSortOrArrange(over,specs);
        break;
      case DISTINCT:
        item = NestedDistinct(over,specs);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         specs.put(t.image,item);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public EvalSpec NestedFilter(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) NestedFilter */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDFILTER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Cond cond; EvalSpec item; Schema subSchema = null;
    try {
      jj_consume_token(FILTER);
      item = BaseEvalSpec(over,specs);
                                                   subSchema = item.getOutputSchemaForPipe(over);
      jj_consume_token(BY);
      cond = PCond(subSchema,null);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return copyItemAndAddSpec(item,new FilterSpec(cond));}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec NestedSortOrArrange(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) NestedSortOrArrange */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDSORTORARRANGE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);EvalSpec sortSpec; ProjectSpec projSpec; EvalSpec item; Schema subSchema = null; Token t; String funcName;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        t = jj_consume_token(ORDER);
        break;
      case ARRANGE:
        t = jj_consume_token(ARRANGE);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      item = BaseEvalSpec(over,specs);
                                          subSchema = item.getOutputSchemaForPipe(over);
      jj_consume_token(BY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
      case IDENTIFIER:
      case DOLLARVAR:
        projSpec = SimpleProj(subSchema);
                                                  sortSpec = projSpec;
        break;
      case STAR:
        sortSpec = Star();
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        jj_consume_token(USING);
        funcName = QualifiedFunction();
            try {
                sortSpec.setComparatorName(funcName);
            } catch (Exception e){
                {if (true) throw new ParseException(e.getMessage());}
            }
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return copyItemAndAddSpec(item,new SortDistinctSpec(false, sortSpec));}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec NestedDistinct(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) NestedDistinct */
 SimpleNode jjtn000 = new SimpleNode(JJTNESTEDDISTINCT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);EvalSpec item; LogicalOperator subOp = null; Token t;
    try {
      jj_consume_token(DISTINCT);
      item = BaseEvalSpec(over,specs);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return copyItemAndAddSpec(item,new SortDistinctSpec(true, null));}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public GenerateSpec GenerateStatement(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) GenerateStatement */
 SimpleNode jjtn000 = new SimpleNode(JJTGENERATESTATEMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);GenerateSpec spec = null; TupleSchema schema;
    try {
      jj_consume_token(GENERATE);
      spec = FlattenedGenerateItemList(over,specs);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return spec;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public GenerateSpec FlattenedGenerateItemList(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) FlattenedGenerateItemList */
 SimpleNode jjtn000 = new SimpleNode(JJTFLATTENEDGENERATEITEMLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);ArrayList<EvalSpec> specList = new ArrayList<EvalSpec>(); EvalSpec item;
    try {
      item = FlattenedGenerateItem(over,specs);
                                                  specList.add(item);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 71:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_10;
        }
        jj_consume_token(71);
        item = FlattenedGenerateItem(over,specs);
                                                       specList.add(item);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new GenerateSpec(specList);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec FlattenedGenerateItem(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) FlattenedGenerateItem */
 SimpleNode jjtn000 = new SimpleNode(JJTFLATTENEDGENERATEITEM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);EvalSpec item; Schema schema = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FLATTEN:
        jj_consume_token(FLATTEN);
        jj_consume_token(72);
        item = InfixExpr(over,specs);
        jj_consume_token(73);
                        item.setFlatten(true);
        break;
      case GROUP:
      case IDENTIFIER:
      case NUMBER:
      case QUOTEDSTRING:
      case DOLLARVAR:
      case 72:
        item = InfixExpr(over,specs);
        break;
      case STAR:
        item = Star();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        jj_consume_token(AS);
        schema = Schema();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                item.setSchema(schema);
                {if (true) return item;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec InfixExpr(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                                /*@bgen(jjtree) InfixExpr */
                                                                 SimpleNode jjtn000 = new SimpleNode(JJTINFIXEXPR);
                                                                 boolean jjtc000 = true;
                                                                 jjtree.openNodeScope(jjtn000);EvalSpec expr;
    try {
      expr = AdditiveExpr(over,specs);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return expr;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec AdditiveExpr(Schema over,  Map<String, EvalSpec> specs) throws ParseException {
                                                                    /*@bgen(jjtree) AdditiveExpr */
                                                                     SimpleNode jjtn000 = new SimpleNode(JJTADDITIVEEXPR);
                                                                     boolean jjtc000 = true;
                                                                     jjtree.openNodeScope(jjtn000);Token t; EvalSpec lhs, rhs; GenerateSpec args;
    try {
      lhs = MultiplicativeExpr(over,specs);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 76:
        case 77:
          ;
          break;
        default:
          jj_la1[40] = jj_gen;
          break label_11;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 76:
          t = jj_consume_token(76);
          break;
        case 77:
          t = jj_consume_token(77);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = MultiplicativeExpr(over,specs);
                        assertAtomic(lhs,true);
                        assertAtomic(rhs,true);
                        ArrayList<EvalSpec> argsList = new ArrayList<EvalSpec>();
                        argsList.add(lhs);
                        argsList.add(rhs);
                        args = new GenerateSpec(argsList);
                        if (t.image.equals("+")){
                                lhs = new FuncEvalSpec(pigContext, ADD.class.getName(), args);
                        }else{
                                lhs = new FuncEvalSpec(pigContext, SUBTRACT.class.getName(), args);
                        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return lhs;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec MultiplicativeExpr(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                                         /*@bgen(jjtree) MultiplicativeExpr */
                                                                          SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICATIVEEXPR);
                                                                          boolean jjtc000 = true;
                                                                          jjtree.openNodeScope(jjtn000);Token t; EvalSpec lhs, rhs; GenerateSpec args;
    try {
      lhs = UnaryExpr(over,specs);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
        case 78:
          ;
          break;
        default:
          jj_la1[42] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          t = jj_consume_token(STAR);
          break;
        case 78:
          t = jj_consume_token(78);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        rhs = UnaryExpr(over,specs);
                        assertAtomic(lhs,true);
                        assertAtomic(rhs,true);
                        ArrayList<EvalSpec> argsList = new ArrayList<EvalSpec>();
                        argsList.add(lhs);
                        argsList.add(rhs);
                        args = new GenerateSpec(argsList);
                        if (t.image.equals("*")){
                                lhs = new FuncEvalSpec(pigContext, MULTIPLY.class.getName(), args);
                        }else{
                                lhs = new FuncEvalSpec(pigContext, DIVIDE.class.getName(), args);
                        }
      }
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 {if (true) return lhs;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec UnaryExpr(Schema over,  Map<String, EvalSpec> specs) throws ParseException {
                                                                 /*@bgen(jjtree) UnaryExpr */
                                                                  SimpleNode jjtn000 = new SimpleNode(JJTUNARYEXPR);
                                                                  boolean jjtc000 = true;
                                                                  jjtree.openNodeScope(jjtn000);EvalSpec expr;
    try {
      if (jj_2_9(2147483647)) {
        expr = BaseEvalSpec(over,specs);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 72:
          jj_consume_token(72);
          expr = InfixExpr(over,specs);
          jj_consume_token(73);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return expr;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec BaseEvalSpec(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) BaseEvalSpec */
 SimpleNode jjtn000 = new SimpleNode(JJTBASEEVALSPEC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);EvalSpec item;EvalSpec projection; Schema subSchema = null; Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case QUOTEDSTRING:
        item = Const();
        break;
      case GROUP:
      case IDENTIFIER:
      case DOLLARVAR:
      case 72:
        if (jj_2_10(2147483647)) {
          item = FuncEvalSpec(over,specs);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case GROUP:
          case IDENTIFIER:
          case DOLLARVAR:
            item = ColOrSpec(over,specs);
            break;
          case 72:
            item = BinCond(over,specs);
            break;
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
         item = item.copy(pigContext);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 79:
          case 80:
            ;
            break;
          default:
            jj_la1[46] = jj_gen;
            break label_13;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 79:
                  subSchema = item.getOutputSchemaForPipe(over);
            jj_consume_token(79);
            projection = BracketedSimpleProj(subSchema);
                                assertAtomic(item,false);
                                item = item.addSpec(projection);
            break;
          case 80:
            jj_consume_token(80);
            t = jj_consume_token(QUOTEDSTRING);
                        assertAtomic(item, false);
                        item = item.addSpec(new MapLookupSpec(unquote(t.image)));
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return item;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec BinCond(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) BinCond */
 SimpleNode jjtn000 = new SimpleNode(JJTBINCOND);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Cond cond; EvalSpec ifTrue, ifFalse; EvalSpec ret = null;
    try {
      jj_consume_token(72);
      cond = PCond(over,specs);
      jj_consume_token(81);
      ifTrue = InfixExpr(over,specs);
      jj_consume_token(82);
      ifFalse = InfixExpr(over,specs);
      jj_consume_token(73);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return new BinCondSpec(cond,ifTrue,ifFalse);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec FuncEvalSpec(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                                   /*@bgen(jjtree) FuncEvalSpec */
                                                                   SimpleNode jjtn000 = new SimpleNode(JJTFUNCEVALSPEC);
                                                                   boolean jjtc000 = true;
                                                                   jjtree.openNodeScope(jjtn000);String funcName; GenerateSpec args;
    try {
      funcName = EvalFunction();
      jj_consume_token(72);
      args = EvalArgs(over,specs);
      jj_consume_token(73);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new FuncEvalSpec(pigContext, funcName, args);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public GenerateSpec EvalArgs(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                                   /*@bgen(jjtree) EvalArgs */
                                                                   SimpleNode jjtn000 = new SimpleNode(JJTEVALARGS);
                                                                   boolean jjtc000 = true;
                                                                   jjtree.openNodeScope(jjtn000);ArrayList<EvalSpec> specList = new ArrayList<EvalSpec>(); EvalSpec item;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case GROUP:
      case IDENTIFIER:
      case NUMBER:
      case QUOTEDSTRING:
      case DOLLARVAR:
      case 72:
        item = EvalArgsItem(over,specs);
                                         specList.add(item);
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 71:
            ;
            break;
          default:
            jj_la1[49] = jj_gen;
            break label_14;
          }
          jj_consume_token(71);
          item = EvalArgsItem(over,specs);
                                            specList.add(item);
        }
        break;
      default:
        jj_la1[50] = jj_gen;

      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return new GenerateSpec(specList);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec EvalArgsItem(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) EvalArgsItem */
 SimpleNode jjtn000 = new SimpleNode(JJTEVALARGSITEM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);EvalSpec item;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
      case IDENTIFIER:
      case NUMBER:
      case QUOTEDSTRING:
      case DOLLARVAR:
      case 72:
        item = InfixExpr(over,specs);
        break;
      case STAR:
        item = Star();
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return item;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Schema Schema() throws ParseException {
                   /*@bgen(jjtree) Schema */
                    SimpleNode jjtn000 = new SimpleNode(JJTSCHEMA);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t1; Schema item = null;
    try {
      if (jj_2_11(2147483647)) {
        item = SchemaTuple();
      } else if (jj_2_12(2147483647)) {
        item = SchemaBag();
      } else if (jj_2_13(2147483647)) {
        item = AtomSchema();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return item;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public Schema AtomSchema() throws ParseException {
                       /*@bgen(jjtree) AtomSchema */
                       SimpleNode jjtn000 = new SimpleNode(JJTATOMSCHEMA);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t1;
    try {
      t1 = jj_consume_token(IDENTIFIER);
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                   {if (true) return new AtomSchema(t1.image);}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public TupleSchema SchemaTuple() throws ParseException {
                             /*@bgen(jjtree) SchemaTuple */
                             SimpleNode jjtn000 = new SimpleNode(JJTSCHEMATUPLE);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t1 = null; TupleSchema list;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t1 = jj_consume_token(IDENTIFIER);
        jj_consume_token(82);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(72);
      list = TupleSchema();
      jj_consume_token(73);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (t1!=null)
                        list.setAlias(t1.image);
                {if (true) return list;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public TupleSchema SchemaBag() throws ParseException {
                           /*@bgen(jjtree) SchemaBag */
                           SimpleNode jjtn000 = new SimpleNode(JJTSCHEMABAG);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t1 = null; TupleSchema list;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t1 = jj_consume_token(IDENTIFIER);
        jj_consume_token(82);
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      jj_consume_token(83);
      list = TupleSchema();
      jj_consume_token(84);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (t1!=null)
                        list.setAlias(t1.image);
                {if (true) return list;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public TupleSchema TupleSchema() throws ParseException {
                             /*@bgen(jjtree) TupleSchema */
                              SimpleNode jjtn000 = new SimpleNode(JJTTUPLESCHEMA);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Schema item = null; TupleSchema list = new TupleSchema();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case 72:
      case 83:
        item = Schema();
                                list.add(item);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 71:
            ;
            break;
          default:
            jj_la1[54] = jj_gen;
            break label_15;
          }
          jj_consume_token(71);
          item = Schema();
                                     list.add(item);
        }
        break;
      default:
        jj_la1[55] = jj_gen;

      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return list;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//CQ stuff
  final public EvalSpec PWindow() throws ParseException {
                      /*@bgen(jjtree) PWindow */
                      SimpleNode jjtn000 = new SimpleNode(JJTPWINDOW);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);EvalSpec spec; int numTuples; double time;
    try {
      jj_consume_token(WINDOW);
      if (jj_2_14(2)) {
        time = PTimeWindow();
                                         spec = new TimeWindowSpec(WindowSpec.windowType.SLIDING, time);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          numTuples = PTupleWindow();
                                               spec = new TupleWindowSpec(WindowSpec.windowType.SLIDING, numTuples);
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return spec;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public double PTimeWindow() throws ParseException {
                        /*@bgen(jjtree) PTimeWindow */
                        SimpleNode jjtn000 = new SimpleNode(JJTPTIMEWINDOW);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);double n; Token t;
    try {
      t = jj_consume_token(NUMBER);
                         n = Double.parseDouble(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SECONDS:
        jj_consume_token(SECONDS);
        break;
      case MINUTES:
        jj_consume_token(MINUTES);
                              n = n*60;
        break;
      case HOURS:
        jj_consume_token(HOURS);
                            n = n * 3600;
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return n;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public int PTupleWindow() throws ParseException {
                      /*@bgen(jjtree) PTupleWindow */
                      SimpleNode jjtn000 = new SimpleNode(JJTPTUPLEWINDOW);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);int n; Token t;
    try {
      t = jj_consume_token(NUMBER);
                         try{
                                                n = Integer.parseInt(t.image);
                                         }catch(NumberFormatException e){
                                                {if (true) throw new ParseException("Only whole number tuple windows allowed.");}
                                         }
      jj_consume_token(TUPLES);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return n;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

// These the simple non-terminals that are shared across many
  final public String EvalFunction() throws ParseException {
                         /*@bgen(jjtree) EvalFunction */
                         SimpleNode jjtn000 = new SimpleNode(JJTEVALFUNCTION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);String funcName;
    try {
      funcName = QualifiedFunction();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                try{
                        EvalFunc ef = (EvalFunc) pigContext.instantiateFuncFromAlias(funcName);
                }catch (Exception e){
                        //throw new ParseException(e.getMessage());
            ParseException pe = new ParseException(e.getMessage());
            pe.initCause(e);
                        {if (true) throw pe;}
                }
                {if (true) return funcName;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public String FilterFunction() throws ParseException {
                           /*@bgen(jjtree) FilterFunction */
                           SimpleNode jjtn000 = new SimpleNode(JJTFILTERFUNCTION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);String funcName;
    try {
      funcName = QualifiedFunction();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                try{
                        FilterFunc ff = (FilterFunc) pigContext.instantiateFuncFromAlias(funcName);
                }catch (Exception e){
                        {if (true) throw new ParseException(funcName + " is not a valid filter function");}
                }
                {if (true) return funcName;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Bug 831620 - '$' support
 */
  final public void ClassName() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
      case 85:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
        jj_consume_token(IDENTIFIER);
        break;
      case 85:
        jj_consume_token(85);
        jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/**
 * Bug 831620 - '$' support
 */
  final public String QualifiedFunction() throws ParseException {
                                    Token t1;StringBuffer s=new StringBuffer();
    t1 = jj_consume_token(IDENTIFIER);
                            s.append(t1.image);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
      case 85:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_17;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 79:
        jj_consume_token(79);
        t1 = jj_consume_token(IDENTIFIER);
                                s.append("." + t1.image);
        break;
      case 85:
        jj_consume_token(85);
        t1 = jj_consume_token(IDENTIFIER);
                                s.append("$" + t1.image);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return s.toString();}
    throw new Error("Missing return statement in function");
  }

// If there is one time it may not be bracketed, but if multiple, they must be bracketed
  final public ProjectSpec BracketedSimpleProj(Schema over) throws ParseException {
                                                /*@bgen(jjtree) BracketedSimpleProj */
                                                SimpleNode jjtn000 = new SimpleNode(JJTBRACKETEDSIMPLEPROJ);
                                                boolean jjtc000 = true;
                                                jjtree.openNodeScope(jjtn000);EvalSpec es; int i; ProjectSpec spec = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
      case IDENTIFIER:
      case DOLLARVAR:
        es = ColOrSpec(over,null);
                                   spec = (ProjectSpec) es;
        break;
      case 72:
        jj_consume_token(72);
        spec = SimpleProj(over);
        jj_consume_token(73);
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return spec;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ProjectSpec SimpleProj(Schema over) throws ParseException {
 /*@bgen(jjtree) SimpleProj */
 SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEPROJ);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);EvalSpec i = null; ArrayList<Integer> colList = new ArrayList<Integer>();
    try {
      i = ColOrSpec(over,null);
                                  colList.add(((ProjectSpec)i).getCol());
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 71:
          ;
          break;
        default:
          jj_la1[63] = jj_gen;
          break label_18;
        }
        jj_consume_token(71);
        i = ColOrSpec(over, null);
                                                colList.add(((ProjectSpec)i).getCol());
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new ProjectSpec(colList);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//Just a simple list of projection items
  final public GenerateSpec SimpleArgs(Schema over) throws ParseException {
                                        /*@bgen(jjtree) SimpleArgs */
                                        SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEARGS);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);EvalSpec i = null; ArrayList<EvalSpec> specList = new ArrayList<EvalSpec>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case GROUP:
      case IDENTIFIER:
      case NUMBER:
      case QUOTEDSTRING:
      case DOLLARVAR:
        i = SimpleArgsItem(over);
                                  specList.add(i);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 71:
            ;
            break;
          default:
            jj_la1[64] = jj_gen;
            break label_19;
          }
          jj_consume_token(71);
          i = SimpleArgsItem(over);
                                               specList.add(i);
        }
        break;
      default:
        jj_la1[65] = jj_gen;

      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (specList.isEmpty())
                        {if (true) return null;}
                else
                        {if (true) return new GenerateSpec(specList);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec SimpleArgsItem(Schema over) throws ParseException {
 /*@bgen(jjtree) SimpleArgsItem */
 SimpleNode jjtn000 = new SimpleNode(JJTSIMPLEARGSITEM);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);EvalSpec item;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case QUOTEDSTRING:
        item = Const();
        break;
      case GROUP:
      case IDENTIFIER:
      case DOLLARVAR:
        item = ColOrSpec(over,null);
        break;
      case STAR:
        item = Star();
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return item;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public StarSpec Star() throws ParseException {
                   /*@bgen(jjtree) Star */
                   SimpleNode jjtn000 = new SimpleNode(JJTSTAR);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t1; StarSpec spec;
    try {
      t1 = jj_consume_token(STAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                spec = new StarSpec();
                spec.setFlatten(true);
                {if (true) return spec;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec Const() throws ParseException {
                    /*@bgen(jjtree) Const */
                    SimpleNode jjtn000 = new SimpleNode(JJTCONST);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t1; String s;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTEDSTRING:
        t1 = jj_consume_token(QUOTEDSTRING);
                           s = unquote(t1.image);
        break;
      case NUMBER:
        t1 = jj_consume_token(NUMBER);
                       s = t1.image;
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new ConstSpec(s);}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec ColOrSpec(Schema over, Map<String, EvalSpec> specs) throws ParseException {
 /*@bgen(jjtree) ColOrSpec */
 SimpleNode jjtn000 = new SimpleNode(JJTCOLORSPEC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);EvalSpec spec;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLARVAR:
        spec = DollarVar();
        break;
      case GROUP:
      case IDENTIFIER:
        spec = AliasFieldOrSpec(over,specs);
        break;
      default:
        jj_la1[68] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return spec;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ProjectSpec DollarVar() throws ParseException {
                           /*@bgen(jjtree) DollarVar */
                           SimpleNode jjtn000 = new SimpleNode(JJTDOLLARVAR);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t1;
    try {
      t1 = jj_consume_token(DOLLARVAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return new ProjectSpec(undollar(t1.image));}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public EvalSpec AliasFieldOrSpec(Schema over, Map<String, EvalSpec> specs) throws ParseException {
                                                                       /*@bgen(jjtree) AliasFieldOrSpec */
                                                                       SimpleNode jjtn000 = new SimpleNode(JJTALIASFIELDORSPEC);
                                                                       boolean jjtc000 = true;
                                                                       jjtree.openNodeScope(jjtn000);Token t1;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        t1 = jj_consume_token(GROUP);
        break;
      case IDENTIFIER:
        t1 = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[69] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                int i; EvalSpec item = null;
                if (specs!=null)
                        item = specs.get(t1.image);

                if (item == null){
                        if ( over == null ||  (i = over.colFor(t1.image)) == -1)
                                {if (true) throw new ParseException("Invalid alias: " + t1.image + " in " + over);}
                        item = new ProjectSpec(i);
                }
                {if (true) return item;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator StreamClause() throws ParseException {
 /*@bgen(jjtree) StreamClause */
        SimpleNode jjtn000 = new SimpleNode(JJTSTREAMCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);LogicalOperator input;
        StreamingCommand command;
    try {
      input = NestedExpr();
      jj_consume_token(THROUGH);
      command = Command();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return new LOEval(opTable, scope, getNextId(), input.getOperatorKey(),
                                  new StreamSpec(pigContext.createExecutableManager(),
                                                 command)
                                 );}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public StreamingCommand Command() throws ParseException {
                             /*@bgen(jjtree) Command */
                             SimpleNode jjtn000 = new SimpleNode(JJTCOMMAND);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t; StreamingCommand command;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXECCOMMAND:
        t = jj_consume_token(EXECCOMMAND);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                String[] argv = splitArgs(unquote(t.image));
                command = new StreamingCommand(pigContext, argv);
        checkAutoShipSpecs(command, argv);
                {if (true) return command;}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                command = pigContext.getCommandForAlias(t.image);
                if (command == null) {
                        {if (true) throw new ParseException("Undefined command-alias: " + t.image +
                                                 " used as stream operator");}
                }

                {if (true) return command;}
        break;
      default:
        jj_la1[70] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator DefineClause() throws ParseException {
                                  /*@bgen(jjtree) DefineClause */
                                  SimpleNode jjtn000 = new SimpleNode(JJTDEFINECLAUSE);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t; Token cmd; String functionName, functionArgs;
    try {
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXECCOMMAND:
        cmd = jj_consume_token(EXECCOMMAND);
            StreamingCommand command =
               new StreamingCommand(pigContext, splitArgs(unquote(cmd.image)));
            String[] paths;
            StreamingCommand.HandleSpec[] handleSpecs;
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SHIP:
          case CACHE:
          case INPUT:
          case OUTPUT:
          case ERROR:
            ;
            break;
          default:
            jj_la1[71] = jj_gen;
            break label_20;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SHIP:
            jj_consume_token(SHIP);
            jj_consume_token(72);
            paths = PathList();
            jj_consume_token(73);
                if (paths.length == 0) {
                        command.setShipFiles(false);
                } else {
                    for (String path : paths) {
                        try {
                            command.addPathToShip(path);
                        } catch(IOException e) {
                            {if (true) throw new ParseException(e.getMessage());}
                        }
                    }
                }
            break;
          case CACHE:
            jj_consume_token(CACHE);
            jj_consume_token(72);
            paths = PathList();
            jj_consume_token(73);
                for (String path : paths) {
                    try {
                        command.addPathToCache(path);
                    } catch(IOException e) {
                        {if (true) throw new ParseException(e.getMessage());}
                    }
                }
            break;
          case INPUT:
            jj_consume_token(INPUT);
            jj_consume_token(72);
            InputOutputSpec(command, StreamingCommand.Handle.INPUT);
            jj_consume_token(73);
            break;
          case OUTPUT:
            jj_consume_token(OUTPUT);
            jj_consume_token(72);
            InputOutputSpec(command, StreamingCommand.Handle.OUTPUT);
            jj_consume_token(73);
            break;
          case ERROR:
            jj_consume_token(ERROR);
            jj_consume_token(72);
            ErrorSpec(command, t.image);
            jj_consume_token(73);
            break;
          default:
            jj_la1[72] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
            pigContext.registerStreamCmd(t.image, command);
        break;
      case IDENTIFIER:
        functionName = QualifiedFunction();
        jj_consume_token(72);
        functionArgs = StringList();
        jj_consume_token(73);
            pigContext.registerFunction(t.image,
                                        (functionName + "(" + functionArgs + ")"));
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        // Return the dummy LODefine
        {if (true) return new LODefine(opTable, scope, getNextId());}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public LogicalOperator StoreClause() throws ParseException {
                                 /*@bgen(jjtree) StoreClause */
                                 SimpleNode jjtn000 = new SimpleNode(JJTSTORECLAUSE);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);LogicalOperator lo; Token t; String fileName; String functionSpec = null; String functionName, functionArgs;
    try {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(INTO);
      fileName = FileName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        jj_consume_token(USING);
        functionName = QualifiedFunction();
         functionSpec = functionName;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 72:
          jj_consume_token(72);
          functionArgs = StringList();
          jj_consume_token(73);
             functionSpec = functionSpec + "(" + functionArgs + ")";
          break;
        default:
          jj_la1[74] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        if (functionSpec == null){
            functionSpec = PigStorage.class.getName();
        }

        LogicalPlan readFrom = aliases.get(t.image);
        if (readFrom == null) {
            {if (true) throw new ParseException("Undefined alias: " + t.image +
                                     " used in STORE");}
        }
        String jobOutputFile = massageFilename(fileName, pigContext);
        lo = new LOStore(opTable, scope, getNextId(), readFrom.getRoot(),
                         new FileSpec(jobOutputFile, functionSpec),
                         false);

        /**************This is already a part of type branch. Don't merge it back ***********/
        if (checkFileExists(jobOutputFile)) {
            {if (true) throw new ParseException(jobOutputFile + " already exists. Cannot overwrite.") ;}
        }
        /************************************************************************************/

        pigContext.setJobOutputFile(jobOutputFile);

        {if (true) return lo;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String[] PathList() throws ParseException {
                       /*@bgen(jjtree) PathList */
                       SimpleNode jjtn000 = new SimpleNode(JJTPATHLIST);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t; List<String> pathList = new ArrayList<String>();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTEDSTRING:
        t = jj_consume_token(QUOTEDSTRING);
                        pathList.add(unquote(t.image));
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 71:
            ;
            break;
          default:
            jj_la1[76] = jj_gen;
            break label_21;
          }
          jj_consume_token(71);
          t = jj_consume_token(QUOTEDSTRING);
                              pathList.add(unquote(t.image));
        }
        break;
      default:
        jj_la1[77] = jj_gen;

      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return pathList.toArray(new String[pathList.size()]);}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void InputOutputSpec(StreamingCommand command, StreamingCommand.Handle handle) throws ParseException {
 /*@bgen(jjtree) InputOutputSpec */
    SimpleNode jjtn000 = new SimpleNode(JJTINPUTOUTPUTSPEC);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);String stream, deserializer;
    StreamingCommand.HandleSpec[] handleSpecs;
    String functionName = "PigStorage", functionArgs="";
    try {
      stream = CommandStream();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        jj_consume_token(USING);
        functionName = QualifiedFunction();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 72:
          jj_consume_token(72);
          functionArgs = StringList();
          jj_consume_token(73);
          break;
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
        deserializer = functionName + "(" + functionArgs + ")";
        command.addHandleSpec(handle,
                              new HandleSpec(stream, deserializer)
                             );
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 71:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_22;
        }
        jj_consume_token(71);
        stream = CommandStream();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case USING:
          jj_consume_token(USING);
          functionName = QualifiedFunction();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 72:
            jj_consume_token(72);
            functionArgs = StringList();
            jj_consume_token(73);
            break;
          default:
            jj_la1[81] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[82] = jj_gen;
          ;
        }
            deserializer = functionName + "(" + functionArgs + ")";
            command.addHandleSpec(handle,
                                  new HandleSpec(stream, deserializer)
                                 );
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String CommandStream() throws ParseException {
                         /*@bgen(jjtree) CommandStream */
                         SimpleNode jjtn000 = new SimpleNode(JJTCOMMANDSTREAM);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STDIN:
        t = jj_consume_token(STDIN);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return "stdin";}
        break;
      case STDOUT:
        t = jj_consume_token(STDOUT);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return "stdout";}
        break;
      case QUOTEDSTRING:
        t = jj_consume_token(QUOTEDSTRING);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     {if (true) return unquote(t.image);}
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ErrorSpec(StreamingCommand command, String alias) throws ParseException {
                                                         /*@bgen(jjtree) ErrorSpec */
                                                         SimpleNode jjtn000 = new SimpleNode(JJTERRORSPEC);
                                                         boolean jjtc000 = true;
                                                         jjtree.openNodeScope(jjtn000);Token t1, t2; int limit = StreamingCommand.MAX_TASKS;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUOTEDSTRING:
        t1 = jj_consume_token(QUOTEDSTRING);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LIMIT:
          jj_consume_token(LIMIT);
          t2 = jj_consume_token(NUMBER);
                                limit = Integer.parseInt(t2.image);
          break;
        default:
          jj_la1[84] = jj_gen;
          ;
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                command.setLogDir(unquote(t1.image));
                command.setLogFilesLimit(limit);
        break;
      default:
        jj_la1[85] = jj_gen;
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        command.setLogDir(alias);
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(79)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(85)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(79)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(QUOTEDSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_3R_74()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_75()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(HOURS)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(MINUTES)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) return true;
    }
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(NUMBER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_79()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  final private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(FLATTEN)) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(DOLLARVAR)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(83)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(84)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_106()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    }
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    if (jj_3R_49()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(MATCHES)) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(FILTEROP)) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(QUOTEDSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(72)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(MATCHES)) return true;
    if (jj_scan_token(QUOTEDSTRING)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(FILTEROP)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    }
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_69() {
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_86()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(72)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_82()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(81)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(82)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(73)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(69)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_82()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_110()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(80)) return true;
    if (jj_scan_token(QUOTEDSTRING)) return true;
    return false;
  }

  public QueryParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[86];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x7ebc00,0x0,0x8000000,0x3ebc00,0x0,0x0,0x8000000,0x40000,0x8000000,0x3ebc00,0x0,0x20000000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x16000000,0xc0000000,0xc0000000,0x0,0x0,0x20000000,0x0,0x0,0x0,0x0,0x0,0x39000,0x18000,0x0,0x20000000,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x0,0x20000000,0x0,0x0,0x20000000,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x40028004,0x0,0x0,0x40028004,0x40000000,0x0,0x0,0x4,0x0,0x28004,0x2,0x0,0x0,0x40,0x80000000,0x0,0x80000000,0x10,0x8,0x20,0x0,0xc0002005,0x0,0x0,0x0,0x40000004,0x40000005,0x0,0x0,0x0,0x0,0x40000000,0x1000,0xc0000004,0x0,0x40000005,0x0,0x0,0xc0002005,0x0,0x0,0x0,0x1,0x1,0x0,0x40000004,0x0,0x0,0xc0000004,0x0,0xc0000005,0xc0000005,0x40000000,0x40000000,0x0,0x40000000,0x80000000,0x700,0x0,0x0,0x0,0x0,0x40000004,0x0,0x0,0xc0000005,0xc0000005,0x80000000,0x40000004,0x40000004,0x40000000,0x7c0000,0x7c0000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x2000000,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x100,0x80,0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x80,0x4,0x0,0x0,0x0,0x80,0x114,0x0,0x0,0x0,0x110,0x110,0x0,0x80,0x80,0x80,0x0,0x400,0x114,0x0,0x10,0x0,0x80,0x114,0x0,0x3000,0x3000,0x4000,0x4000,0x100,0x110,0x18000,0x18000,0x114,0x80,0x114,0x114,0x0,0x0,0x80,0x80100,0x0,0x0,0x208000,0x208000,0x208000,0x208000,0x110,0x80,0x80,0x14,0x14,0x4,0x10,0x0,0x8,0x0,0x0,0x8,0x100,0x0,0x80,0x4,0x100,0x0,0x80,0x100,0x0,0x4,0x0,0x4,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public QueryParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public QueryParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public QueryParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public QueryParser(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(QueryParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 86; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[86];
    for (int i = 0; i < 86; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 86; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 86; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}


class StringUtils {

       public static String unescapeInputString(String input)  {

            if (input == null) {
                return new String() ;
            }

            // Needed variables
            // preset the size so our StringBuilders don't have to grow
            int inputlength = input.length();
            StringBuilder unicode = new StringBuilder(4);
            StringBuilder output = new StringBuilder(inputlength) ;
            boolean hadSlash = false;
            boolean inUnicode = false;

            // The main loop
            for (int i = 0; i < inputlength; i++) {
                char ch = input.charAt(i);
                // currently doing unicode mode
                if (inUnicode) {
                    unicode.append(ch);
                    if (unicode.length() == 4) {
                        // unicode now contains the four hex digits
                        try {
                            int value = Integer.parseInt(unicode.toString(), 0x10);
                            output.append((char) value) ;
                            // reuse the StringBuilder
                            unicode.setLength(0);
                            inUnicode = false;
                            hadSlash = false;
                        } catch (NumberFormatException nfe) {
                            throw new RuntimeException("Unable to parse unicode value: " + unicode, nfe);
                        }
                    }
                    continue;
                }
                if (hadSlash) {
                    // handle an escaped value
                    hadSlash = false;
                    switch (ch) {
                        case '\\':
                            output.append('\\');
                            break;
                        case '\'':
                            output.append('\'');
                            break;
                        case 'r':
                            output.append('\r');
                            break;
                        case 'f':
                            output.append('\f');
                            break;
                        case 't':
                            output.append('\t');
                            break;
                        case 'n':
                            output.append('\n');
                            break;
                        case 'b':
                            output.append('\b');
                            break;
                        case 'u':
                            {
                                // switch to unicode mode
                                inUnicode = true;
                                break;
                            }
                        default :
                            output.append(ch);
                            break;
                    }
                    continue;
                } else if (ch == '\\') {
                    hadSlash = true;
                    continue;
                }
                output.append(ch);
            }

            return output.toString() ;
        }
}
